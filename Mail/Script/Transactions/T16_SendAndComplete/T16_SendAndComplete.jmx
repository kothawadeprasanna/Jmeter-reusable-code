<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="[TF]User_Login" enabled="false"/>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[TC] T16_SendAndComplete" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="508 /lta/web/controller/mail/agent/reply/replyemail.jsp" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="__eg_request_token__" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">__eg_request_token__</stringProp>
                    <stringProp name="Argument.value">${lt_X-companyname-csrf}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_reqId_" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">_reqId_</stringProp>
                    <stringProp name="Argument.value">pl_trcontentmail_0_ms__id12_1476861651512_4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="activity_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">activity_id</stringProp>
                    <stringProp name="Argument.value">${lt_inbox_actid_6_g1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="department_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${lt_dept_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">department_id</stringProp>
                  </elementProp>
                  <elementProp name="from_email_address" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${lt_to_email_address}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">from_email_address</stringProp>
                  </elementProp>
                  <elementProp name="recv_email_address" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${lt_to_email_address}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">recv_email_address</stringProp>
                  </elementProp>
                  <elementProp name="to_email_address" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${lt_from_email_address}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">to_email_address</stringProp>
                  </elementProp>
                  <elementProp name="cc_email_address" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cc_email_address</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="bcc_email_address" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">bcc_email_address</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="reply_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">reply_type</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="activity_flag" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">activity_flag</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="save_draft_flag" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">save_draft_flag</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="save_save_draft_flag" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">save_save_draft_flag</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="reply_to_save_draft_flag" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">reply_to_save_draft_flag</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageActionFlag" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageActionFlag</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="case_flag" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">case_flag</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="email_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">email_id</stringProp>
                    <stringProp name="Argument.value">-1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="sent_email_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sent_email_id</stringProp>
                    <stringProp name="Argument.value">${lt_org_email_id_g2}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="alias_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">alias_id</stringProp>
                    <stringProp name="Argument.value">${lt_alias_id_g2}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="case_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">case_id</stringProp>
                    <stringProp name="Argument.value">${lt_inbox_actid_8_g3}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="case_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">case_type</stringProp>
                    <stringProp name="Argument.value">2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="customer_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">customer_id</stringProp>
                    <stringProp name="Argument.value">${lt_inbox_actid_7_g2}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="subject" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">subject</stringProp>
                    <stringProp name="Argument.value">Re%3A%20Testathon%3A6%20%5B%231068%5D</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="reply_to_email_address" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">reply_to_email_address</stringProp>
                    <stringProp name="Argument.value">${lt_to_email_address}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="content_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">content_type</stringProp>
                    <stringProp name="Argument.value">.htm</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="text_content" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">text_content</stringProp>
                    <stringProp name="Argument.value">Good%20Morning%20%0D%0AHow%20are%20you%20doing%20sir%2Fmadam%0D%0ATo%20set%20your%20pull%20options%3A%201st.%20In%20the%20Agent%20Console%20toolbar%2C%20click%20the%20Options%20button.%202nd.%20In%20the%20Options%20window%2C%20go%20to%20the%20Pull%20Options%20tab%20and%20provide%20the%20following%20details.%20%EF%81%AD%20Activity%20to%20pull%20first%3A%20From%20the%20dropdown%20list%20select%20the%20type%20of%20activities%20to%20pull.%20The%20options%20available%20are%3A%20%EF%81%AC%20Due%20soonest%3A%20Activities%20that%20are%20not%20late%2C%20but%20are%20due%20the%20soonest.%20%EF%81%AC%20Highest%20priority%3A%20Activities%20that%20are%20marked%20with%20the%20highest%20priority.%20%EF%81%AC%20Most%20overdue%3A%20Activities%20that%20are%20late%20and%20are%20already%20overdue.%20%EF%81%AC%20Newest%3A%20Activities%20that%20have%20the%20most%20recent%20creation%20date%20and%20time.%20%EF%81%AC%20Oldest%3A%20Activities%20that%20have%20the%20oldest%20creation%20date%20and%20time.%20%EF%81%AD%20Maximum%20activities%20to%20pull%3A%20Specify%20the%20number%20of%20activities%20you%20want%20to%20pull%20each%20time%20you%20click%20the%20Pull%20Next%20button%20or%20the%20Pull%20Next%20Chat%20button.%0D%0AeGain%20Case%20Manager%E2%84%A2%20is%20a%20dynamic%20case%20management%20solution%20that%20helps%20companies%20provide%20quick%2C%20high-quality%2C%20and%20cost-efficient%20resolution%20of%20customer%20issues%20across%20traditional%20and%20emerging%20interaction%20channels.%20It%20is%20one%20of%20the%20many%20innovative%20customer%20interaction%20products%20in%20eGain%2C%20the%20industry%E2%80%99s%20top-rated%20customer%20engagement%20software%20suite%2C%20which%20helps%20businesses%20transform%20their%20traditional%20call%20centers%20into%20multilane%20customer%20engagement%20hubs.%0D%0AeGain%20Case%20Manager%20will%20enable%20you%20to%20provide%20consistently%20effective%20interactions%20across%20social%2C%20web%2C%20contact%20center%2C%20and%20mobile%20channels.%20The%20result%3F%20Healthy%2C%20profitable%2C%20and%20long-lasting%20relationships%20with%20your%20customers!%0D%0AStreamline%20and%20automate%20service%20processes%0D%0AService%20process%20automation%20is%20key%20to%20driving%20operating%20efficiency%20in%20your%20contact%20center.%20eGain%20Case%20Manager%20leverages%20the%20power%20of%20eGain%20Customer%20Engagement%20Platform%E2%84%A2%20(eGain%20Platform%E2%84%A2)%20to%20help%20streamline%20and%20automate%20processes.%20Using%20the%20visual%20workflow%20designer%2C%20you%20can%20set%20up%20pre-routing%2C%20handling%2C%20and%20post-routing%20business%20rules%20to%20drive%20consistency%20and%20efficiency%20through%20your%20contact%20centers.%0D%0AEffectively%20categorize%20interactions%0D%0ACategories%20and%20resolution%20codes%20are%20assigned%20automatically%20as%20well%20as%20manually.%20Effective%20classification%20helps%20deliver%20valuable%20customer%20feedback%20and%20service%20trends%20to%20your%20product%20and%20marketing%20team.%0D%0AMake%20agents%20more%20productive%0D%0AAgent%20costs%2C%20typically%2C%20account%20for%20over%2050%25%20of%20contact%20center%20expenses.%20Increase%20agent%20productivity%20through%20a%20unified%20agent%20desktop%20that%20eliminates%20the%20need%20to%20switch%20applications%20and%20improves%20access%20to%20information.%0D%0AAgents%20have%20access%20to%3A%0D%0AComplete%20customer%20information%2C%20including%20interactions%20through%20other%20channels%0D%0AThe%20common%20knowledge%20base%0D%0ASubject%20matter%20experts%20through%20collaboration%20tools%0D%0AMultimedia%20interaction%20tools%20such%20as%20chat%20and%20web%20cobrowsing%20to%20help%20customers%0D%0AAuto-summarization%20and%20note-taking%20facilities%0D%0AResolve%20issues%20quickly%0D%0AeGain%20Case%20Manager%20offers%20the%20industry%E2%80%99s%20most%20comprehensive%20knowledge%20management%20tools%20for%20resolving%20cases%3A%0D%0AAgents%2C%20across%20channels%2C%20have%20one-click%20access%20to%20eGain%20Knowledge%20Base.%0D%0AAgents%20can%20find%20information%20through%20FAQ%20lists%2C%20browsing%2C%20searching%2C%20and%20guided%20help%20(supported%20by%20eGain%E2%80%99s%20pioneering%20reasoning%20engine).%0D%0AAgents%20can%20also%20contribute%20to%20the%20knowledge%20base.%0D%0AMonitor%20and%20track%20every%20call%0D%0APriorities%20and%20SLAs%20are%20assigned%20automatically%2C%20and%20alarms%20are%20triggered%20when%20SLAs%20are%0D%0Alikely%20to%20be%20missed.%20In%20addition%2C%20managers%20and%20supervisors%20can%3A%0D%0AUse%20real-time%20monitors%20to%20oversee%20queues%20or%20agents.%0D%0ACheck%20the%20audit%20trail%20of%20interactions%20to%20ensure%20correct%20handling.%0D%0ARun%20reports%20to%20analyze%20call%20volumes%2C%20SLAs%2C%20agent%20productivity%2C%20knowledge%20base%20usage%2C%20and%20query%20trends.%0D%0AIntegrate%20multichannel%20customer%20communications%0D%0AeGain%20Case%20Manager%20is%20one%20of%20the%20many%20modular%20applications%20in%20eGain%2C%20which%20helps%20businesses%20set%20up%20omnichannel%20customer%20engagement%20hubs.%20Use%20other%20eGain%20products%20to%20enable%20escalations%20to%20and%20from%20self-service%2C%20live%20chat%2C%20email%2C%20and%20social%20interactions.%0D%0AeGain%20%7C%20Gartner%20MQ%20Leader%20%7C%20%231%20Customer%20Engagement%20Cloud%0D%0Awww.eGain.com%0D%0A--Original%20Message--%0D%0AFrom%3A%201475604434481%40companyname-corp.com%0D%0ADate%3A%2010%2F04%2F2016%2011%3A07%20AM%0D%0ATo%3A%20sujit01%40companyname-corp.com%0D%0ASubject%3A%20Testathon%3A6%0D%0A%0D%0AManaging%20access%20to%20your%20databases%0D%0A%0D%0ABuilding%20a%20secure%20and%20reliable%20database%20server%20involves%20both%20appropriate%20security%20means%20to%20be%20applied%20to%20the%20server%20as%20well%20as%20implementation%20of%20planned%20security%20assumptions%20to%20cover%20database%20objects.%20With%20a%20Microsoft%20SQL%20Server%202000%20database%20that%20is%20firmly%20integrated%20with%20the%20Windows%20operating%20system%2C%20you%20can%20attain%20these%20goals%20with%20relatively%20little%20work.%20Let%20us%20therefore%20distinguish%20between%20four%20separate%20levels%20of%20database%20security%20control%20over%20access%20privileges%3A%0D%0A%0D%0A%20%20%20%20*%20Control%20over%20accessing%20the%20database%20at%20the%20server%20level%2C%20which%20applies%20to%20all%20databases.%20An%20appropriate%20configuration%20of%20remote%20access%20(over%20the%20network)%20to%20the%20system%2C%20on%20which%20the%20database%20server%20is%20installed%20-%20assigning%20permissions%20to%20user%20and%20group%20accounts%20in%20line%20with%20the%20organization%E2%80%99s%20security%20policy.%20Configuring%20Web%20servers%20to%20cover%20security%20oversights%20when%20databases%20are%20to%20be%20accessed%20at%20Web%20level%3B%20if%20need%20be%20additional%20security%20solutions%20like%20firewall%20setups%20or%20intrusion%20detection%20systems.%20However%2C%20discussing%20details%20of%20this%20level%20of%20security%20is%20not%20given%20consideration%20in%20this%20article.%20Of%20course%2C%20obtaining%20remote%20access%20to%20a%20system%20running%20SQL%20Server%20does%20not%20yet%20mean%20being%20granted%20access%20to%20the%20database%20server%20itself!%20%20%20%0D%0A%20%20%20%20*%20Control%20over%20accessing%20the%20SQL%20Server%20%E2%80%93%20at%20this%20stage%2C%20you%20can%20control%20access%20to%20databases%20with%20the%20components%20of%20the%20SQL%20Server%20security%20model%20for%20users%20that%20can%20access%20the%20server%20but%20not%20log%20in%20to%20the%20database%20server.%20Logging%20in%20to%20SQL%20Server%20gives%20a%20user%20permission%20to%20connect%20to%20SQL%20Server%20and%20work%20with%20minimum%20privileges%20in%20the%20master%20database%20but%20not%20to%20access%20all%20databases.%0D%0A%20%20%20%20*%20Regulating%20access%20to%20the%20SQL%20Server%20database%20is%20the%20next%20level%20of%20SQL%20Server%20security%20%E2%80%93%20each%20database%20managed%20by%20SQL%20Server%20has%20a%20list%20of%20valid%20users%20authorized%20to%20access%20it%20and%20using%20their%20logins%20to%20connect%20the%20server.%20Database%20administrators%20can%20set%20up%20logins%20and%20users%20in%20databases%20giving%20them%20permissions%20in%20accordance%20with%20the%20organization%E2%80%99s%20security%20policy.%20Each%20newly%20added%20user%20is%20given%20specific%20permissions%20that%20are%20valid%20for%20specific%20databases.%20In%20this%20manner%2C%20a%20user%20may%20obtain%2C%20for%20example%2C%20an%20administrator%20privilege%20(in%20the%20X%20database)%20whilst%20being%20a%20%E2%80%9Cnormal%E2%80%9D%20user%20(in%20the%20Y%20database)%20with%20no%20need%20to%20log%20in%20to%20these%20databases%20separately.%20The%20name%20of%20the%20database%20user%20is%20guest%2C%20and%20this%20guest%20account%20is%20used%20for%20logins%20without%20a%20user%20account%20of%20their%20own%20in%20a%20database.%20An%20SQL%20Server%20login%20has%20no%20rights%20to%20a%20database%20until%20you%20set%20up%20the%20login%20as%20a%20user%20of%20that%20database.%20The%20right%20to%20access%20a%20specific%20database%20does%20not%20automatically%20imply%20the%20right%20to%20execute%20any%20SQL%20(Structured%20Query%20Language)%20command%20on%20any%20database%20object.%20%20%20%0D%0A%20%20%20%20*%20The%20fourth%20level%20lets%20you%20assign%20permissions%20on%20objects%20in%20a%20database%3B%20for%20example%2C%20you%20can%20specify%20which%20tables%20or%20stored%20procedures%20a%20user%20can%20run%20and%20which%20views%20he%20can%20see.%20In%20fact%2C%20this%20means%20giving%20the%20user%20specific%20permissions%20to%20execute%20certain%20SQL%20commands%20on%20defined%20objects%20of%20the%20database.</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="str_content" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">str_content</stringProp>
                    <stringProp name="Argument.value">%3C!DOCTYPE%20HTML%20PUBLIC%20%22-%2F%2FW3C%2F%2FDTD%20HTML%204.0%20Transitional%2F%2FEN%22%3E%20%3CHTML%3E%20%3CHEAD%3E%20%3CTITLE%3E%20%3C%2FTITLE%3E%20%3C%2FHEAD%3E%20%3Cbody%3E%3CDIV%20id%3D%22eGainmsgDIV23%22%20style%3D%22font-family%3ASegoe%20UI%3Bfont-size%3A10pt%22%3E%3Chead%3E%0D%0A%3CMETA%20name%3DGENERATOR%20content%3D%22MSHTML%2011.00.9600.18427%22%3E%3C%2Fhead%3E%3Cbody%3E%3CP%3EGood%20Morning%20%3C%2FP%3E%0D%0A%3CP%3EHow%20are%20you%20doing%20sir%2Fmadam%3C%2FP%3E%0D%0A%3CP%3E%0D%0A%3CMETA%20name%3DGENERATOR%20content%3D%22MSHTML%2011.00.10586.596%22%3E%0D%0A%3CP%3ETo%20set%20your%20pull%20options%3A%201st.%20In%20the%20Agent%20Console%20toolbar%2C%20click%20the%20Options%20button.%202nd.%20In%20the%20Options%20window%2C%20go%20to%20the%20Pull%20Options%20tab%20and%20provide%20the%20following%20details.%20%EF%81%AD%20Activity%20to%20pull%20first%3A%20From%20the%20dropdown%20list%20select%20the%20type%20of%20activities%20to%20pull.%20The%20options%20available%20are%3A%20%EF%81%AC%20Due%20soonest%3A%20Activities%20that%20are%20not%20late%2C%20but%20are%20due%20the%20soonest.%20%EF%81%AC%20Highest%20priority%3A%20Activities%20that%20are%20marked%20with%20the%20highest%20priority.%20%EF%81%AC%20Most%20overdue%3A%20Activities%20that%20are%20late%20and%20are%20already%20overdue.%20%EF%81%AC%20Newest%3A%20Activities%20that%20have%20the%20most%20recent%20creation%20date%20and%20time.%20%EF%81%AC%20Oldest%3A%20Activities%20that%20have%20the%20oldest%20creation%20date%20and%20time.%20%EF%81%AD%20Maximum%20activities%20to%20pull%3A%20Specify%20the%20number%20of%20activities%20you%20want%20to%20pull%20each%20time%20you%20click%20the%20Pull%20Next%20button%20or%20the%20Pull%20Next%20Chat%20button.%3C%2FP%3E%0D%0A%3CP%3EeGain%20Case%20Manager%E2%84%A2%20is%20a%20dynamic%20case%20management%20solution%20that%20helps%20companies%20provide%20quick%2C%20high-quality%2C%20and%20cost-efficient%20resolution%20of%20customer%20issues%20across%20traditional%20and%20emerging%20interaction%20channels.%20It%20is%20one%20of%20the%20many%20innovative%20customer%20interaction%20products%20in%20eGain%2C%20the%20industry%E2%80%99s%20top-rated%20customer%20engagement%20software%20suite%2C%20which%20helps%20businesses%20transform%20their%20traditional%20call%20centers%20into%20multilane%20customer%20engagement%20hubs.%3CBR%3EeGain%20Case%20Manager%20will%20enable%20you%20to%20provide%20consistently%20effective%20interactions%20across%20social%2C%20web%2C%20contact%20center%2C%20and%20mobile%20channels.%20The%20result%3F%20Healthy%2C%20profitable%2C%20and%20long-lasting%20relationships%20with%20your%20customers!%3CBR%3EStreamline%20and%20automate%20service%20processes%3CBR%3EService%20process%20automation%20is%20key%20to%20driving%20operating%20efficiency%20in%20your%20contact%20center.%20eGain%20Case%20Manager%20leverages%20the%20power%20of%20eGain%20Customer%20Engagement%20Platform%E2%84%A2%20(eGain%20Platform%E2%84%A2)%20to%20help%20streamline%20and%20automate%20processes.%20Using%20the%20visual%20workflow%20designer%2C%20you%20can%20set%20up%20pre-routing%2C%20handling%2C%20and%20post-routing%20business%20rules%20to%20drive%20consistency%20and%20efficiency%20through%20your%20contact%20centers.%3CBR%3EEffectively%20categorize%20interactions%3CBR%3ECategories%20and%20resolution%20codes%20are%20assigned%20automatically%20as%20well%20as%20manually.%20Effective%20classification%20helps%20deliver%20valuable%20customer%20feedback%20and%20service%20trends%20to%20your%20product%20and%20marketing%20team.%3CBR%3EMake%20agents%20more%20productive%3CBR%3EAgent%20costs%2C%20typically%2C%20account%20for%20over%2050%25%20of%20contact%20center%20expenses.%20Increase%20agent%20productivity%20through%20a%20unified%20agent%20desktop%20that%20eliminates%20the%20need%20to%20switch%20applications%20and%20improves%20access%20to%20information.%3CBR%3EAgents%20have%20access%20to%3A%3CBR%3EComplete%20customer%20information%2C%20including%20interactions%20through%20other%20channels%3CBR%3EThe%20common%20knowledge%20base%3CBR%3ESubject%20matter%20experts%20through%20collaboration%20tools%3CBR%3EMultimedia%20interaction%20tools%20such%20as%20chat%20and%20web%20cobrowsing%20to%20help%20customers%3CBR%3EAuto-summarization%20and%20note-taking%20facilities%3CBR%3EResolve%20issues%20quickly%3CBR%3EeGain%20Case%20Manager%20offers%20the%20industry%E2%80%99s%20most%20comprehensive%20knowledge%20management%20tools%20for%20resolving%20cases%3A%3CBR%3EAgents%2C%20across%20channels%2C%20have%20one-click%20access%20to%20eGain%20Knowledge%20Base.%3CBR%3EAgents%20can%20find%20information%20through%20FAQ%20lists%2C%20browsing%2C%20searching%2C%20and%20guided%20help%20(supported%20by%20eGain%E2%80%99s%20pioneering%20reasoning%20engine).%3CBR%3EAgents%20can%20also%20contribute%20to%20the%20knowledge%20base.%3CBR%3EMonitor%20and%20track%20every%20call%3CBR%3EPriorities%20and%20SLAs%20are%20assigned%20automatically%2C%20and%20alarms%20are%20triggered%20when%20SLAs%20are%3CBR%3Elikely%20to%20be%20missed.%20In%20addition%2C%20managers%20and%20supervisors%20can%3A%3CBR%3EUse%20real-time%20monitors%20to%20oversee%20queues%20or%20agents.%3CBR%3ECheck%20the%20audit%20trail%20of%20interactions%20to%20ensure%20correct%20handling.%3CBR%3ERun%20reports%20to%20analyze%20call%20volumes%2C%20SLAs%2C%20agent%20productivity%2C%20knowledge%20base%20usage%2C%20and%20query%20trends.%3CBR%3EIntegrate%20multichannel%20customer%20communications%3CBR%3EeGain%20Case%20Manager%20is%20one%20of%20the%20many%20modular%20applications%20in%20eGain%2C%20which%20helps%20businesses%20set%20up%20omnichannel%20customer%20engagement%20hubs.%20Use%20other%20eGain%20products%20to%20enable%20escalations%20to%20and%20from%20self-service%2C%20live%20chat%2C%20email%2C%20and%20social%20interactions.%3C%2FP%3E%0D%0A%3CP%3E%3C%2FP%3E%0D%0A%3CP%3E%3CA%20href%3D%22http%3A%2F%2Fwww.companyname.com%2F%22%3EeGain%3C%2FA%3E%20%7C%20%3CA%20href%3D%22http%3A%2F%2Fwww.companyname.com%2Fcompany%2Fnews%2Fpress_releases%2Fcompanyname-positioned-in-the-leaders-quadrant-of-the-magic-quadrant-for-crm-web-customer-service-applications%2F%22%3EGartner%20MQ%20Leader%3C%2FA%3E%20%7C%20%231%20Customer%20Engagement%20Cloud%3C%2FP%3E%0D%0A%3CP%3E%3CA%20href%3D%22http%3A%2F%2Fwww.companyname.com%2F%22%3Ewww.eGain.com%3C%2FA%3E%3C%2FP%3E--Original%20Message--%3CBR%3EFrom%3A%201475604434481%40companyname-corp.com%3CBR%3EDate%3A%2010%2F04%2F2016%2011%3A07%20AM%3CBR%3ETo%3A%20sujit01%40companyname-corp.com%3CBR%3ESubject%3A%20Testathon%3A6%3CBR%3E%3CBR%3EManaging%20access%20to%20your%20databases%3CBR%3E%3CBR%3EBuilding%20a%20secure%20and%20reliable%20database%20server%20involves%20both%20appropriate%20security%20means%20to%20be%20applied%20to%20the%20server%20as%20well%20as%20implementation%20of%20planned%20security%20assumptions%20to%20cover%20database%20objects.%20With%20a%20Microsoft%20SQL%20Server%202000%20database%20that%20is%20firmly%20integrated%20with%20the%20Windows%20operating%20system%2C%20you%20can%20attain%20these%20goals%20with%20relatively%20little%20work.%20Let%20us%20therefore%20distinguish%20between%20four%20separate%20levels%20of%20database%20security%20control%20over%20access%20privileges%3A%3CBR%3E%3CBR%3E%26nbsp%3B%26nbsp%3B%26nbsp%3B%20*%20Control%20over%20accessing%20the%20database%20at%20the%20server%20level%2C%20which%20applies%20to%20all%20databases.%20An%20appropriate%20configuration%20of%20remote%20access%20(over%20the%20network)%20to%20the%20system%2C%20on%20which%20the%20database%20server%20is%20installed%20-%20assigning%20permissions%20to%20user%20and%20group%20accounts%20in%20line%20with%20the%20organization%E2%80%99s%20security%20policy.%20Configuring%20Web%20servers%20to%20cover%20security%20oversights%20when%20databases%20are%20to%20be%20accessed%20at%20Web%20level%3B%20if%20need%20be%20additional%20security%20solutions%20like%20firewall%20setups%20or%20intrusion%20detection%20systems.%20However%2C%20discussing%20details%20of%20this%20level%20of%20security%20is%20not%20given%20consideration%20in%20this%20article.%20Of%20course%2C%20obtaining%20remote%20access%20to%20a%20system%20running%20SQL%20Server%20does%20not%20yet%20mean%20being%20granted%20access%20to%20the%20database%20server%20itself!%26nbsp%3B%26nbsp%3B%20%3CBR%3E%26nbsp%3B%26nbsp%3B%26nbsp%3B%20*%20Control%20over%20accessing%20the%20SQL%20Server%20%E2%80%93%20at%20this%20stage%2C%20you%20can%20control%20access%20to%20databases%20with%20the%20components%20of%20the%20SQL%20Server%20security%20model%20for%20users%20that%20can%20access%20the%20server%20but%20not%20log%20in%20to%20the%20database%20server.%20Logging%20in%20to%20SQL%20Server%20gives%20a%20user%20permission%20to%20connect%20to%20SQL%20Server%20and%20work%20with%20minimum%20privileges%20in%20the%20master%20database%20but%20not%20to%20access%20all%20databases.%3CBR%3E%26nbsp%3B%26nbsp%3B%26nbsp%3B%20*%20Regulating%20access%20to%20the%20SQL%20Server%20database%20is%20the%20next%20level%20of%20SQL%20Server%20security%20%E2%80%93%20each%20database%20managed%20by%20SQL%20Server%20has%20a%20list%20of%20valid%20users%20authorized%20to%20access%20it%20and%20using%20their%20logins%20to%20connect%20the%20server.%20Database%20administrators%20can%20set%20up%20logins%20and%20users%20in%20databases%20giving%20them%20permissions%20in%20accordance%20with%20the%20organization%E2%80%99s%20security%20policy.%20Each%20newly%20added%20user%20is%20given%20specific%20permissions%20that%20are%20valid%20for%20specific%20databases.%20In%20this%20manner%2C%20a%20user%20may%20obtain%2C%20for%20example%2C%20an%20administrator%20privilege%20(in%20the%20X%20database)%20whilst%20being%20a%20%E2%80%9Cnormal%E2%80%9D%20user%20(in%20the%20Y%20database)%20with%20no%20need%20to%20log%20in%20to%20these%20databases%20separately.%20The%20name%20of%20the%20database%20user%20is%20guest%2C%20and%20this%20guest%20account%20is%20used%20for%20logins%20without%20a%20user%20account%20of%20their%20own%20in%20a%20database.%20An%20SQL%20Server%20login%20has%20no%20rights%20to%20a%20database%20until%20you%20set%20up%20the%20login%20as%20a%20user%20of%20that%20database.%20The%20right%20to%20access%20a%20specific%20database%20does%20not%20automatically%20imply%20the%20right%20to%20execute%20any%20SQL%20(Structured%20Query%20Language)%20command%20on%20any%20database%20object.%26nbsp%3B%26nbsp%3B%20%3CBR%3E%26nbsp%3B%26nbsp%3B%26nbsp%3B%20*%20The%20fourth%20level%20lets%20you%20assign%20permissions%20on%20objects%20in%20a%20database%3B%20for%20example%2C%20you%20can%20specify%20which%20tables%20or%20stored%20procedures%20a%20user%20can%20run%20and%20which%20views%20he%20can%20see.%20In%20fact%2C%20this%20means%20giving%20the%20user%20specific%20permissions%20to%20execute%20certain%20SQL%20commands%20on%20defined%20objects%20of%20the%20database.%3C%2Fbody%3E%3C%2FDIV%3E%3C%2FBODY%3E%20%3C%2FHTML%3E</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="charset" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">charset</stringProp>
                    <stringProp name="Argument.value">UTF-8</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="activity_complete_flag" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">activity_complete_flag</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="categoryIds" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">categoryIds</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="num_categoryIds" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">num_categoryIds</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="rescodeIds" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">rescodeIds</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="num_rescodeIds" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">num_rescodeIds</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="note_types" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">note_types</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="note_ids" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">note_ids</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="num_notes" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">num_notes</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="language" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">language</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="country" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">country</stringProp>
                    <stringProp name="Argument.value">us</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="queue_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">queue_id</stringProp>
                    <stringProp name="Argument.value">${lt_queue_ids_g5}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="emailAttachmentIds" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">emailAttachmentIds</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="activityId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">activityId</stringProp>
                    <stringProp name="Argument.value">${lt_inbox_actid_6_g1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="attachments" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">attachments</stringProp>
                    <stringProp name="Argument.value">${lt_att_id_g1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="num_attachments" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">num_attachments</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="event_duaration" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">event_duaration</stringProp>
                    <stringProp name="Argument.value">155</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="HFGS_article_ids" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">HFGS_article_ids</stringProp>
                    <stringProp name="Argument.value">${lt_header_art_id},${lt_footer_art_id},${lt_sign_art_id},${lt_greet_art_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="cust_departmentalized" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cust_departmentalized</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="currentActivityId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">currentActivityId</stringProp>
                    <stringProp name="Argument.value">${lt_inbox_actid_6_g1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="article_ids" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">article_ids</stringProp>
                    <stringProp name="Argument.value">${lt_header_art_id},${lt_footer_art_id},${lt_sign_art_id},${lt_greet_art_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="compose_save_draft_flag" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">compose_save_draft_flag</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="reAttemptFlag" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">reAttemptFlag</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="macroArticleIds" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">macroArticleIds</stringProp>
                    <stringProp name="Argument.value">${lt_macro_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="activity_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">activity_type</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="activity_sub_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">activity_sub_type</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="calltrack_flag" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">calltrack_flag</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="language_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">language_id</stringProp>
                    <stringProp name="Argument.value">4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${lt_server_name}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/lta/web/controller/mail/agent/reply/replyemail.jsp</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-us</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; Touch; rv:11.0) like Gecko</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${lt_server_name}/lta/web/view/mail/agent/reply/replybody.htm</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">1</stringProp>
                <stringProp name="RandomTimer.range">3000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="509 /lta/web/controller/platform/agent/inbox/getincompleteactivitiesforcase.jsp" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="caseId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">caseId</stringProp>
                    <stringProp name="Argument.value">${lt_inbox_actid_8_g3}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="language" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">language</stringProp>
                    <stringProp name="Argument.value">en</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="country" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">country</stringProp>
                    <stringProp name="Argument.value">us</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="__time__" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">__time__</stringProp>
                    <stringProp name="Argument.value">1476862073821</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_reqId_" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">_reqId_</stringProp>
                    <stringProp name="Argument.value">pl_trcontentmail_1_ms__id12_1476861651512_5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="__eg_request_token__" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">__eg_request_token__</stringProp>
                    <stringProp name="Argument.value">${lt_X-companyname-csrf}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${lt_server_name}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/lta/web/controller/platform/agent/inbox/getincompleteactivitiesforcase.jsp</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-us</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; Touch; rv:11.0) like Gecko</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${lt_server_name}/lta/web/view/mail/agent/reply/replybody.htm</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="510 /lta/web/controller/platform/agent/inbox/editactivities.jsp?dbgUlck=&amp;dbgLck=1083&amp;dbgTs=1476862074466" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="__eg_request_token__" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">__eg_request_token__</stringProp>
                    <stringProp name="Argument.value">${lt_X-companyname-csrf}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_reqId_" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">_reqId_</stringProp>
                    <stringProp name="Argument.value">pl_inboxList_3_ms__id14_1476861652436_3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="case_ids" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">case_ids</stringProp>
                    <stringProp name="Argument.value">${lt_inbox_actid_8_g3}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="customer_ids" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">customer_ids</stringProp>
                    <stringProp name="Argument.value">${lt_inbox_actid_7_g2}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dept_ids" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">dept_ids</stringProp>
                    <stringProp name="Argument.value">${lt_dept_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="original_queue_ids" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">original_queue_ids</stringProp>
                    <stringProp name="Argument.value">${lt_queue_ids_g5}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="cur_dept_ids" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cur_dept_ids</stringProp>
                    <stringProp name="Argument.value">${lt_dept_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="cur_queue_ids" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cur_queue_ids</stringProp>
                    <stringProp name="Argument.value">${lt_queue_ids_g5}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="cur_types" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cur_types</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="cur_sub_types" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cur_sub_types</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="curr_case_ids" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">curr_case_ids</stringProp>
                    <stringProp name="Argument.value">${lt_inbox_actid_13_g3}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="curr_cust_ids" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">curr_cust_ids</stringProp>
                    <stringProp name="Argument.value">${lt_inbox_actid_12_g2}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="curr_ct_flags" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">curr_ct_flags</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="activity_types" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">activity_types</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="activity_sub_types" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">activity_sub_types</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="language_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">language_id</stringProp>
                    <stringProp name="Argument.value">4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="selected_ids" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">selected_ids</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="current_selected_ids" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">current_selected_ids</stringProp>
                    <stringProp name="Argument.value">${lt_inbox_actid_11_g1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="modify_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">modify_type</stringProp>
                    <stringProp name="Argument.value">2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="event_duaration" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">event_duaration</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="supervisoryFlag" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">supervisoryFlag</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="cur_supervisoryFlag" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cur_supervisoryFlag</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orig_assigned_to" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orig_assigned_to</stringProp>
                    <stringProp name="Argument.value">${lt_user_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ctFlags" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ctFlags</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="reason1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">reason1</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="reason2" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">reason2</stringProp>
                    <stringProp name="Argument.value">4</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="reason3" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">reason3</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="cur_reason3" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cur_reason3</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="request_action" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">request_action</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${lt_server_name}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/lta/web/controller/platform/agent/inbox/editactivities.jsp?dbgUlck=&amp;dbgLck=${lt_inbox_actid_11_g1}&amp;dbgTs=1476862074466</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-us</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; Touch; rv:11.0) like Gecko</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${lt_server_name}/lta/web/view/platform/agent/inbox/inboxlist.jsp?__eg_request_token__=${lt_X-companyname-csrf}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">1</stringProp>
                <stringProp name="RandomTimer.range">3000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="511 /lta/web/controller/mail/agent/reply/getemaildetails.jsp" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="activityId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">activityId</stringProp>
                    <stringProp name="Argument.value">${lt_inbox_actid_11_g1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="toBeUnlockedActivityIds" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">toBeUnlockedActivityIds</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="activityMode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">activityMode</stringProp>
                    <stringProp name="Argument.value">100</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="deptId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">deptId</stringProp>
                    <stringProp name="Argument.value">${lt_dept_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="lastActionReason" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">lastActionReason</stringProp>
                    <stringProp name="Argument.value">null</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="activityType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">activityType</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="activitySubType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">activitySubType</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="language" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">language</stringProp>
                    <stringProp name="Argument.value">en</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="country" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">country</stringProp>
                    <stringProp name="Argument.value">us</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="__time__" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">__time__</stringProp>
                    <stringProp name="Argument.value">1476862075863</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_reqId_" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">_reqId_</stringProp>
                    <stringProp name="Argument.value">pl_trcontentmail_0_ms__id12_1476861651512_5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="__eg_request_token__" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">__eg_request_token__</stringProp>
                    <stringProp name="Argument.value">${lt_X-companyname-csrf}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${lt_server_name}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/lta/web/controller/mail/agent/reply/getemaildetails.jsp</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-us</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; Touch; rv:11.0) like Gecko</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${lt_server_name}/lta/web/view/mail/agent/reply/replybody.htm</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">1</stringProp>
                <stringProp name="RandomTimer.range">3000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="512 /lta/web/controller/mail/agent/reply/gethfgsarticlescontent.jsp" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="__eg_request_token__" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">__eg_request_token__</stringProp>
                    <stringProp name="Argument.value">${lt_X-companyname-csrf}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_reqId_" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">_reqId_</stringProp>
                    <stringProp name="Argument.value">pl_trcontentmail_1_ms__id12_1476861651512_6</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="article_ids" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">article_ids</stringProp>
                    <stringProp name="Argument.value">${lt_header_art_id},${lt_footer_art_id},${lt_sign_art_id},${lt_greet_art_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="userid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">userid</stringProp>
                    <stringProp name="Argument.value">${lt_user_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="caseid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">caseid</stringProp>
                    <stringProp name="Argument.value">${lt_inbox_actid_13_g3}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="activityid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">activityid</stringProp>
                    <stringProp name="Argument.value">${lt_inbox_actid_11_g1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="customerid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">customerid</stringProp>
                    <stringProp name="Argument.value">${lt_inbox_actid_12_g2}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="contactpersonid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">contactpersonid</stringProp>
                    <stringProp name="Argument.value">${lt_inbox_actid_20_g5}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="contactpointid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">contactpointid</stringProp>
                    <stringProp name="Argument.value">${lt_inbox_actid_19_g4}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="contactpointtype" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">contactpointtype</stringProp>
                    <stringProp name="Argument.value">E</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="language" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">language</stringProp>
                    <stringProp name="Argument.value">en</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="country" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">country</stringProp>
                    <stringProp name="Argument.value">us</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="charSet" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">charSet</stringProp>
                    <stringProp name="Argument.value">utf-8</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${lt_server_name}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/lta/web/controller/mail/agent/reply/gethfgsarticlescontent.jsp</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-us</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; Touch; rv:11.0) like Gecko</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${lt_server_name}/lta/web/view/mail/agent/reply/replybody.htm</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">1</stringProp>
                <stringProp name="RandomTimer.range">3000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
