<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Express Chat" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="P_Server" elementType="Argument">
            <stringProp name="Argument.name">P_Server</stringProp>
            <stringProp name="Argument.value">${__P(env_hostname,www.companynamestage.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_DataFile" elementType="Argument">
            <stringProp name="Argument.name">P_DataFile</stringProp>
            <stringProp name="Argument.value">${__P(data_fileName,UserDataL2.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_mediaSvcServer" elementType="Argument">
            <stringProp name="Argument.name">P_mediaSvcServer</stringProp>
            <stringProp name="Argument.value">${__P(env_mediaserver,mediasvc.companynamestage.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_twilioServer" elementType="Argument">
            <stringProp name="Argument.name">P_twilioServer</stringProp>
            <stringProp name="Argument.value">${__P(env_twilioServer,tsock.us1.twilio.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_bamnrserver" elementType="Argument">
            <stringProp name="Argument.name">P_bamnrserver</stringProp>
            <stringProp name="Argument.value">${__P(env_bamserver,bam.nr-data.net)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_Noofmsges" elementType="Argument">
            <stringProp name="Argument.name">P_Noofmsges</stringProp>
            <stringProp name="Argument.value">${__P(numberofmsg,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOAD_HOME_PAGE" elementType="Argument">
            <stringProp name="Argument.name">LOAD_HOME_PAGE</stringProp>
            <stringProp name="Argument.value">${__P(LOAD_HOME_PAGE,true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_OtherUserIdFile" elementType="Argument">
            <stringProp name="Argument.name">P_OtherUserIdFile</stringProp>
            <stringProp name="Argument.value">${__P(data_OtherUsers,OtherUserID_L2.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FlagTosendOtherRequests" elementType="Argument">
            <stringProp name="Argument.name">FlagTosendOtherRequests</stringProp>
            <stringProp name="Argument.value">true</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="P_Server" elementType="Argument">
            <stringProp name="Argument.name">P_Server</stringProp>
            <stringProp name="Argument.value">${__P(env_hostname,www.companynamestage.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_DataFile" elementType="Argument">
            <stringProp name="Argument.name">P_DataFile</stringProp>
            <stringProp name="Argument.value">${__P(data_fileName,UserDataL2.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_mediaSvcServer" elementType="Argument">
            <stringProp name="Argument.name">P_mediaSvcServer</stringProp>
            <stringProp name="Argument.value">${__P(env_mediaserver,mediasvc.companynamestage.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_twilioServer" elementType="Argument">
            <stringProp name="Argument.name">P_twilioServer</stringProp>
            <stringProp name="Argument.value">${__P(env_twilioServer,tsock.us1.twilio.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_bamnrserver" elementType="Argument">
            <stringProp name="Argument.name">P_bamnrserver</stringProp>
            <stringProp name="Argument.value">${__P(env_bamserver,bam.nr-data.net)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_Noofmsges" elementType="Argument">
            <stringProp name="Argument.name">P_Noofmsges</stringProp>
            <stringProp name="Argument.value">${__P(numberofmsg,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P_OtherUserIdFile" elementType="Argument">
            <stringProp name="Argument.name">P_OtherUserIdFile</stringProp>
            <stringProp name="Argument.value">${__P(data_OtherUsers,OtherUserID_L2.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FlagTosendOtherRequests" elementType="Argument">
            <stringProp name="Argument.name">FlagTosendOtherRequests</stringProp>
            <stringProp name="Argument.value">true</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="filename">${P_DataFile}</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="variableNames">P_Username,P_Password</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="filename">${P_OtherUserIdFile}</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="variableNames">P_OtherUserID</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers"/>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="c_continuationToken" elementType="Argument">
            <stringProp name="Argument.name">c_continuationToken</stringProp>
            <stringProp name="Argument.value">null</stringProp>
            <stringProp name="Argument.desc">temporary</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">false</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">99</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">Counter</stringProp>
          <stringProp name="CounterConfig.format">00</stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="OOC- For login Request" enabled="true">
          <stringProp name="TestPlan.comments">Need to add login part to capture the sessionID
</stringProp>
        </OnceOnlyController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/account/signin" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">${P_Username}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="Argument.value">${P_Password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/account/signin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${P_Server}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userId</stringProp>
              <stringProp name="RegexExtractor.regex">userId&quot;:&quot;(.*?)&quot;}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOTFOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-836030906">userId</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/secure/Login" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">${P_Username}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="Argument.value">${P_Password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/secure/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${P_Server}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Launch-URL" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${__P(TC_Launch,100)}</stringProp>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="account/signin?signUpReturnUrl=https%3A%2F%2Fwww.companynamestage.com%2Fcs%2Foffers%2Fsubscribe%3Fsub%3D1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="signUpReturnUrl" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">signUpReturnUrl</stringProp>
                    <stringProp name="Argument.value">https://${P_Server}/cs/offers/subscribe?sub=1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">account/signin</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1068664737">Sign up today</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/account/signin/frame?" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">account/signin/frame</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-542111160">Sign in</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Acccount Signin" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${__P(TC_AccountSignin,100)}</stringProp>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/account/signin/frame/authenticate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;password&quot;:&quot;${P_Password}&quot;,&quot;username&quot;:&quot;${P_Username}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">account/signin/frame/authenticate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${P_Server}</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-836030906">userId</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">mypasswordreset</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.passwordReset</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOTFOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get UserID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">userId</stringProp>
                <stringProp name="RegexExtractor.regex">userId&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If -PasswordReset" enabled="true">
            <stringProp name="IfController.condition">&quot;${mypasswordreset}&quot;==&quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="secure/account/credentials/" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">secure/account/credentials/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${P_Server}</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1979598185">Account credentials</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If -PasswordResetFalse" enabled="true">
            <stringProp name="IfController.condition">&quot;${LOAD_HOME_PAGE}&quot;==&quot;true&quot; &amp;&amp; &quot;${mypasswordreset}&quot;==&quot;false&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="HomePage" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <stringProp name="ThroughputController.percentThroughput">${__P(TC_HomePage,100)}</stringProp>
            </ThroughputController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="2126059291">companyname.com</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/Banners/API/Get/63?callback=jQuery111108894649281341518_1556110557840&amp;webpart-request-type=ajax&amp;_=1556110557841" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="webpart-request-type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">webpart-request-type</stringProp>
                      <stringProp name="Argument.value">ajax</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="callback" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">callback</stringProp>
                      <stringProp name="Argument.value">jQuery111108894649281341518_${__time(,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="_" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">_</stringProp>
                      <stringProp name="Argument.value">${__time(,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">Banners/API/Get/63</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="webpart-request-type" elementType="Header">
                      <stringProp name="Header.name">webpart-request-type</stringProp>
                      <stringProp name="Header.value">ajax</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/cs/spots2/tealium-lihp-banner.wp" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">cs/spots2/tealium-lihp-banner.wp</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/cs/spots2/LIHPOverlayCMS.wp" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">cs/spots2/LIHPOverlayCMS.wp</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- for sending other requests." enabled="true">
          <stringProp name="IfController.condition">&quot;${FlagTosendOtherRequests}&quot;==&quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${P_Server}/messaging" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">messaging</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Host" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.companynamestage.com</stringProp>
                </elementProp>
                <elementProp name="Connection" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,de;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="514169069">https://www.companynamecdn.com/express-fe</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Static requests" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/ui/2.0.0/css/core.css" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ui/2.0.0/css/core.css</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/shared-footer/1.0.177/footer.css" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">shared-footer/1.0.177/footer.css</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/shared-navigation/2.1/header-82c2d27f.min.css" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">shared-navigation/2.1/header-82c2d27f.min.css</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/express-fe/bundle.1b6737b974ecfd8e4a1f.css" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">express-fe/bundle.1b6737b974ecfd8e4a1f.css</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/ui-static/i/logo/companyname-on-dark.svg" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ui-static/i/logo/companyname-on-dark.svg</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/ui/2.0.0/js/core.js" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ui/2.0.0/js/core.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/shared-navigation/2.1/header-7af2e342.min.js" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">shared-navigation/2.1/header-7af2e342.min.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/express-fe/bundle.prod.6a8d03a4564e4eb6f8ee.js" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">express-fe/bundle.prod.6a8d03a4564e4eb6f8ee.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/express-fe/vendor.func.180a640e6eb9aed1c17c.js" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">express-fe/vendor.func.180a640e6eb9aed1c17c.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/ui-static/font/source-sans-pro-bold.woff2" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ui-static/font/source-sans-pro-bold.woff2</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.companynamecdn.com/ui/2.0.0/css/core.css</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${P_Server}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/ui/2.0.0/font/companyname-icon.woff2" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ui/2.0.0/font/companyname-icon.woff2</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.companynamecdn.com/ui/2.0.0/css/core.css</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${P_Server}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/ui-static/font/source-sans-pro.woff2" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ui-static/font/source-sans-pro.woff2</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.companynamecdn.com/ui/2.0.0/css/core.css</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${P_Server}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://js-agent.newrelic.com/nr-1118.min.js" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">js-agent.newrelic.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">nr-1118.min.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${P_Server}/app-api/express/v1/authentication/getaccesstoken" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;client&quot;:&quot;TO&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">app-api/express/v1/authentication/getaccesstoken</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${P_Server}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Host" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${P_Server}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,de;q=0.7</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="credentials" elementType="Header">
                  <stringProp name="Header.name">credentials</stringProp>
                  <stringProp name="Header.value">include</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                </elementProp>
                <elementProp name="Connection" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="Content-Length" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">15</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="GetAuthToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">c_authToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;token&quot;:&quot;(.*?)&quot;}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOTFOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="110541305">token</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${P_bamnrserver}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tt</stringProp>
                  <stringProp name="Argument.value">ff004ca4861858</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="a" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">a</stringProp>
                  <stringProp name="Argument.value">226782050</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="be" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">be</stringProp>
                  <stringProp name="Argument.value">1321</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="jsonp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">jsonp</stringProp>
                  <stringProp name="Argument.value">NREUM.setToken</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ap" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ap</stringProp>
                  <stringProp name="Argument.value">26.008679</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rst" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rst</stringProp>
                  <stringProp name="Argument.value">4269</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ref" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ref</stringProp>
                  <stringProp name="Argument.value">https://${P_Server}/messaging</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1118.0c07c19</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="to" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">to</stringProp>
                  <stringProp name="Argument.value">NVJQMRAEWhBRUUNbCgwYdx0SF1EQQ1hEHSInYx1K</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="perf" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">perf</stringProp>
                  <stringProp name="Argument.value">%7B%22timing%22:%7B%22of%22:1548678161798,%22n%22:0,%22f%22:2,%22dn%22:4,%22dne%22:209,%22c%22:209,%22s%22:469,%22ce%22:738,%22rq%22:738,%22rp%22:1134,%22rpe%22:1138,%22dl%22:1146,%22di%22:3154,%22ds%22:3154,%22de%22:3155,%22dc%22:3467,%22l%22:3467,%22le%22:3473%7D,%22navigation%22:%7B%7D%7D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fe</stringProp>
                  <stringProp name="Argument.value">3469</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="dc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">dc</stringProp>
                  <stringProp name="Argument.value">3155</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_bamnrserver}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">1/ae44cb1d6a</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="746709932">NREUM.setToken</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${P_Server}/app-api/express/v1/profiles/bulk" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[&quot;${userId}&quot;]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">app-api/express/v1/profiles/bulk</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${P_Server}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Host" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${P_Server}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,de;q=0.7</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                </elementProp>
                <elementProp name="Connection" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="Content-Length" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">40</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">SecureATT=eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IjEifQ.eyJzdWIiOiIwMDAwMDJlMy0wMDAxLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJleHAiOjE1NDQwODM1OTh9.YW0Mnr5AKPWsmCf3gNXWKoCn7gmUU2-6TqpA-w0jWYfmtZDFClIs5QWb1I-WnorrcOtLqJSUrdwBrKtIDOvihA;</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="123">{</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${P_mediaSvcServer}/v2/image/namespaces/60564/media/3da10ce9-81a7-4d34-b382-eb08a2f95b9a" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="maxSide" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">maxSide</stringProp>
                  <stringProp name="Argument.value">269.9999928474426</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="client" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">client</stringProp>
                  <stringProp name="Argument.value">ExpressFE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_mediaSvcServer}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">v2/image/namespaces/60564/media/3da10ce9-81a7-4d34-b382-eb08a2f95b9a</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${P_Server}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Host" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">mediasvc.companynamedev.com</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,de;q=0.7</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                </elementProp>
                <elementProp name="Connection" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${P_mediaSvcServer}/v2/image/namespaces/60564/media/e127fc9c-6f21-45d9-be7a-5a2c9ac30edf" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="maxSide" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">maxSide</stringProp>
                  <stringProp name="Argument.value">89.99999761581421</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="client" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">client</stringProp>
                  <stringProp name="Argument.value">ExpressFE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_mediaSvcServer}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">v2/image/namespaces/60564/media/e127fc9c-6f21-45d9-be7a-5a2c9ac30edf</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${P_Server}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Host" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">mediasvc.companynamedev.com</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,de;q=0.7</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                </elementProp>
                <elementProp name="Connection" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/express/v1/profiles?userId=&lt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">app-api/express/v1/profiles?userId=${userId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1752163738">UserId</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/express/v1/profiles/details?userId=&lt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">app-api/express/v1/profiles/details?userId=${userId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1752163738">UserId</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/express/v1/getdnatests?userId=&lt;&gt;" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">app-api/express/v1/getdnatests?userId=${userId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Getting 403 User does not have any tests that have consent to match against</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="80698881">Tests</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/express/v1/gettreecounts?userId=&lt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">app-api/express/v1/gettreecounts?userId=${userId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115608926">TreeCounts</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/express/v1/getbestmatches?primaryUserId=&lt;&gt;&amp;otherUserId=&lt;&gt;" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">app-api/express/v1/getbestmatches?primaryUserId=${userId}&amp;otherUserId=${P_OtherUserID}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Requests are failing as the corresponding data is not present</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1425318314">MatchDetail</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/express/v1/getdnamatch?userId=&lt;&gt; " enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">app-api/express/v1/getdnamatch?primaryUserId=${userId}&amp;otherUserId=${P_OtherUserID}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Requests are failing as the corresponding data is not present</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1425318314">MatchDetail</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/express/v1/getblockedusers?userId=&lt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">app-api/express/v1/getblockedusers?userId=${userId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="91">[</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="WebSocket Open Connection" enabled="true">
            <boolProp name="TLS">true</boolProp>
            <stringProp name="server">${P_twilioServer}</stringProp>
            <stringProp name="port">443</stringProp>
            <stringProp name="path">/v3/wsconnect</stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
          </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
          <hashTree/>
          <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="1st frame: init  Frame" enabled="true">
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="TLS">true</boolProp>
            <stringProp name="server">tsock.us1.twilio</stringProp>
            <stringProp name="port">443</stringProp>
            <stringProp name="path">/v3/wsconnect</stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${FirstMessage}</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating first frame message" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">	  String id=&quot;TM&quot;+&quot;${__UUID}&quot;;  
	  String str = &quot;TWILSOCK V3.0 889..{\&quot;id\&quot;:\&quot;&quot;+id+&quot;\&quot;,\&quot;method\&quot;:\&quot;init\&quot;,\&quot;token\&quot;:\&quot;${c_authToken}\&quot;,\&quot;continuation_token\&quot;:${c_continuationToken},\&quot;metadata\&quot;:{\&quot;ver\&quot;:\&quot;0.5.6\&quot;,\&quot;env\&quot;:\&quot;Chrome\&quot;,\&quot;envv\&quot;:\&quot;71.0.3578.98\&quot;,\&quot;os\&quot;:\&quot;Windows\&quot;,\&quot;osv\&quot;:\&quot;10\&quot;,\&quot;osa\&quot;:64,\&quot;sdk\&quot;:\&quot;js-default\&quot;},\&quot;registrations\&quot;:null,\&quot;capabilities\&quot;:[\&quot;client_update\&quot;,\&quot;offline_storage\&quot;],\&quot;payload_size\&quot;:0}..&quot;;  
	 // //log.info(&quot;length:&quot;+str.length());
	  //log.info(&quot;**************1st frame requestFirst message text input : &quot; + str);
	  char[] chars = str.toCharArray();	  
	  StringBuffer hexconverted = new StringBuffer();
	  for(int i = 0; i &lt; chars.length; i++){
	  	
		  hexconverted.append(&quot;0x&quot;+Integer.toHexString((int)chars[i])+&quot; &quot;);
	  }
	  
	 ////log.info(&quot;First message Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;FirstMessage&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">byte[] firstFrameResponse = prev.getResponseData();
String s = new String(firstFrameResponse);

log.info(&quot;************Response of first frame : &quot;+s);
if(s.contains(&quot;\&quot;code\&quot;:200,\&quot;status\&quot;:\&quot;OK\&quot;&quot;)){
AssertionResult.setFailure(false);

}
else{
AssertionResult.setFailure(true);
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="2nd frame:Put notification Message Frame" enabled="true">
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="TLS">true</boolProp>
            <stringProp name="server">tsock.us1.twilio</stringProp>
            <stringProp name="port">443</stringProp>
            <stringProp name="path">/v3/wsconnect</stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${NotificationMessage}</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">SecureATT=${c_authToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">
//Actual Notification messgae	  //TWILSOCK V3.0 159..{&quot;method&quot;:&quot;put_notification_ctx&quot;,&quot;notification_ctx_id&quot;:&quot;8ef3efd2-e3f6-4764-87a0-be6778fa8f30&quot;,&quot;id&quot;:&quot;TMd09f2a33-9ef1-42a7-bfad-e13a4684d40a&quot;,&quot;payload_size&quot;:319}..{&quot;product_id&quot;:&quot;ip_messaging&quot;,&quot;notification_protocol_version&quot;:4,&quot;endpoint_platform&quot;:&quot;Mozilla/5.0 (Windows NT10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot;,&quot;message_types&quot;:[&quot;twilio.sync.event&quot;,&quot;com.twilio.rtd.cds.document&quot;,&quot;com.twilio.rtd.cds.list&quot;,&quot;com.twilio.rtd.cds.map&quot;]}
	 	  String id=&quot;TM&quot;+&quot;${__UUID}&quot;;  
	  String str = &quot;TWILSOCK V3.0 159..{\&quot;method\&quot;:\&quot;put_notification_ctx\&quot;,\&quot;notification_ctx_id\&quot;:\&quot;${__UUID}\&quot;,\&quot;id\&quot;:\&quot;&quot;+id+&quot;\&quot;,\&quot;payload_size\&quot;:319}..{\&quot;product_id\&quot;:\&quot;ip_messaging\&quot;,\&quot;notification_protocol_version\&quot;:4,\&quot;endpoint_platform\&quot;:\&quot;Mozilla/5.0 (Windows NT10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\&quot;,\&quot;message_types\&quot;:[\&quot;twilio.sync.event\&quot;,\&quot;com.twilio.rtd.cds.document\&quot;,\&quot;com.twilio.rtd.cds.list\&quot;,\&quot;com.twilio.rtd.cds.map\&quot;]}&quot;;  
	  ////log.info(&quot;length:&quot;+str.length());
	  //log.info(&quot;************2nd frame NotificationMessage message text input : &quot; + str);
	  char[] chars = str.toCharArray();	  
	  StringBuffer hexconverted = new StringBuffer();
	  for(int i = 0; i &lt; chars.length; i++){
	  	
		  hexconverted.append(&quot;0x&quot;+Integer.toHexString((int)chars[i])+&quot; &quot;);
	  }
	  
	// //log.info(&quot;NotificationMessage message Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;NotificationMessage&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">byte[] firstFrameResponse = prev.getResponseData();
String s = new String(firstFrameResponse);

//log.info(&quot;************Response 2nd frame: &quot;+s);
if(s.contains(&quot;\&quot;code\&quot;:200,\&quot;status\&quot;:\&quot;notification-ctx-created\&quot;&quot;)){
AssertionResult.setFailure(false);

}
else{
AssertionResult.setFailure(true);
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="3rd Frame:/v3/Lists" enabled="true">
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="TLS">true</boolProp>
            <stringProp name="server">tsock.us1.twilio</stringProp>
            <stringProp name="port">443</stringProp>
            <stringProp name="path">/v3/wsconnect</stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${3rdFrameLists}</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">SecureATT=${c_authToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">
//Actual 3rd messgae	  TWILSOCK V3.0 479..{&quot;id&quot;:&quot;TM7b833c0b-705e-4ab9-95b9-c8c3268e830a&quot;,&quot;method&quot;:&quot;message&quot;,&quot;active_grant&quot;:&quot;ip_messaging&quot;,&quot;payload_type&quot;:&quot;application/json&quot;,&quot;http_request&quot;:{&quot;host&quot;:&quot;cds.us1.twilio.com&quot;,&quot;path&quot;:&quot;/v3/Lists&quot;,&quot;method&quot;:&quot;POST&quot;,&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;application/json&quot;,&quot;Twilio-Sync-Client-Info&quot;:&quot;{\&quot;sdk\&quot;:\&quot;js\&quot;,\&quot;sdkVer\&quot;:\&quot;0.8.5\&quot;,\&quot;os\&quot;:\&quot;Windows\&quot;,\&quot;osVer\&quot;:\&quot;10\&quot;,\&quot;pl\&quot;:\&quot;Chrome\&quot;,\&quot;plVer\&quot;:\&quot;71.0.3578.98\&quot;}&quot;,&quot;Twilio-Request-Id&quot;:&quot;RQef8a95219ce64a208efb060b52e64d4a&quot;}},&quot;payload_size&quot;:153}..{&quot;purpose&quot;:&quot;com.twilio.rtd.ipmsg&quot;,&quot;context&quot;:{&quot;type&quot;:&quot;IpMsgSession&quot;,&quot;apiVersion&quot;:&quot;3&quot;,&quot;endpointPlatform&quot;:&quot;js|3.1.0|Windows 1064-bit|Chrome|71.0.3578.98&quot;}}
	 	  	  String id=&quot;TM&quot;+&quot;${__UUID}&quot;;
	  String str1 = &quot;TWILSOCK V3.0 479..{\&quot;id\&quot;:\&quot;&quot;+id+&quot;\&quot;,\&quot;method\&quot;:\&quot;message\&quot;,\&quot;active_grant\&quot;:\&quot;ip_messaging\&quot;,\&quot;payload_type\&quot;:\&quot;application/json\&quot;,\&quot;http_request\&quot;:{\&quot;host\&quot;:\&quot;cds.us1.twilio.com\&quot;,\&quot;path\&quot;:\&quot;/v3/Lists\&quot;,\&quot;method\&quot;:\&quot;POST\&quot;,\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;application/json\&quot;,\&quot;Twilio-Sync-Client-Info\&quot;:\&quot;&quot;;
	  String str2=&quot;{\&quot;sdk\&quot;:\&quot;js\&quot;,\&quot;sdkVer\&quot;:\&quot;0.8.5\&quot;,\&quot;os\&quot;:\&quot;Windows\&quot;,\&quot;osVer\&quot;:\&quot;10\&quot;,\&quot;pl\&quot;:\&quot;Chrome\&quot;,\&quot;plVer\&quot;:\&quot;71.0.3578.98\&quot;}&quot;;
String str3=	  &quot;\&quot;,\&quot;Twilio-Request-Id\&quot;:\&quot;RQ${__RandomString(32,123456789qwertyuiopasdfghjklzxcvbnm,)}\&quot;}},\&quot;payload_size\&quot;:153}..{\&quot;purpose\&quot;:\&quot;com.twilio.rtd.ipmsg\&quot;,\&quot;context\&quot;:{\&quot;type\&quot;:\&quot;IpMsgSession\&quot;,\&quot;apiVersion\&quot;:\&quot;3\&quot;,\&quot;endpointPlatform\&quot;:\&quot;js|3.1.0|Windows 1064-bit|Chrome|71.0.3578.98\&quot;}}&quot;;
//String str2changed=str2.replace(&quot;\&quot;&quot;,&quot;\\\&quot;&quot;);
	  String str= str1+str2+str3;
	  //log.info(&quot;***************3rdFrameLists input : &quot; + str);
	  char[] chars1 = str1.toCharArray();
	  char[] chars2 = str2.toCharArray();
	  char[] chars3 = str3.toCharArray();			  
	  StringBuffer hexconverted1 = new StringBuffer();
	  for(int i = 0; i &lt; chars1.length; i++){
	  	
		  hexconverted1.append(&quot;0x&quot;+Integer.toHexString((int)chars1[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted2 = new StringBuffer();
	  for(int i = 0; i &lt; chars2.length; i++){
	  	
		  hexconverted2.append(&quot;0x&quot;+Integer.toHexString((int)chars2[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted3 = new StringBuffer();
	  for(int i = 0; i &lt; chars3.length; i++){
	  	
		  hexconverted3.append(&quot;0x&quot;+Integer.toHexString((int)chars3[i])+&quot; &quot;);
	  }
	  String hexas1=hexconverted1.toString();
	  String hexas2=hexconverted2.toString().replace(&quot;0x22&quot;,&quot;0x5c 0x22&quot;);
	  String hexas3=hexconverted3.toString();
	  String hexconverted = hexas1+hexas2+hexas3;
	////log.info(&quot;Text Message:&quot;+hexconverted);
	// //log.info(&quot;3rdFrameLists input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;3rdFrameLists&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 //vars.put(&quot;3rdFrameListsTXT&quot;,str);

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="ProcessBinaryResponse" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">byte[] firstFrameResponse = prev.getResponseData();
String s = new String(firstFrameResponse);

//log.info(&quot;Response : &quot;+s);
if(s.contains(&quot;200&quot;)){
AssertionResult.setFailure(false);
}
else{
AssertionResult.setFailure(true);
}
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">
byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);

if(text.contains(&quot;\&quot;code\&quot;:200,\&quot;status\&quot;:\&quot;OK\&quot;&quot;)){
AssertionResult.setFailure(false);

}
else{
	//log.info(&quot;*******3rd frame Response : &quot;+text);
AssertionResult.setFailure(true);
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.regex.Pattern;
import java.util.regex.Matcher;

byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
//String text    =s;                ;
//&quot;https://cds.us1.twilio.com/v3/Services/IS88dff50e283c41b5b8b7d11b3479667f/Lists/SH7903960a83c941f2bea3050451dabd9a\&quot;
String ServiceSIDString1 = &quot;.com/v3/Services/(.+?)/Lists&quot;;
String SID=&quot;\&quot;sid\&quot;:\&quot;(.+?)\&quot;&quot;;

        Pattern pattern = Pattern.compile(ServiceSIDString1);
        Matcher matcher = pattern.matcher(text);
        
        Pattern pattern2 = Pattern.compile(SID);
        Matcher matcher2 = pattern2.matcher(text);

        while(matcher.find()) {
            //log.info(&quot;ServiceSIDString1: &quot; + matcher.group(1));
             vars.put(&quot;ServiceSIDString1&quot;,matcher.group(1));                 
        }
        while(matcher2.find()) {
            //log.info(&quot;SID: &quot; + matcher2.group(1));
            vars.put(&quot;SID&quot;,matcher2.group(1));
                   
        }
      
        
   
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="4th Frame: Get Context" enabled="true">
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="TLS">true</boolProp>
            <stringProp name="server">tsock.us1.twilio</stringProp>
            <stringProp name="port">443</stringProp>
            <stringProp name="path">/v3/wsconnect</stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${GetContextFrame}</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">SecureATT=${c_authToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">	//Actual Msg TWILSOCK V3.0 563..{&quot;id&quot;:&quot;TMa94122ed-6e08-46d0-8b61-0776801df1bf&quot;,&quot;method&quot;:&quot;message&quot;,&quot;active_grant&quot;:&quot;ip_messaging&quot;,&quot;payload_type&quot;:&quot;application/json&quot;,&quot;http_request&quot;:{&quot;host&quot;:&quot;cds.us1.twilio.com&quot;,&quot;path&quot;:&quot;/v3/Services/IS88dff50e283c41b5b8b7d11b3479667f/Lists/SH9958c7d69210445fb06f98ade18bd814/Context&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;application/json&quot;,&quot;Twilio-Sync-Client-Info&quot;:&quot;{\&quot;sdk\&quot;:\&quot;js\&quot;,\&quot;sdkVer\&quot;:\&quot;0.8.5\&quot;,\&quot;os\&quot;:\&quot;Windows\&quot;,\&quot;osVer\&quot;:\&quot;10\&quot;,\&quot;pl\&quot;:\&quot;Chrome\&quot;,\&quot;plVer\&quot;:\&quot;71.0.3578.98\&quot;}&quot;,&quot;Twilio-Request-Id&quot;:&quot;RQ58fb06acc6e048a19e0f4f62eaea946b&quot;}},&quot;payload_size&quot;:0}..
	  String id=&quot;TM&quot;+&quot;${__UUID}&quot;;
	  String str1 = &quot;TWILSOCK V3.0 563..{\&quot;id\&quot;:\&quot;&quot;+id+&quot;\&quot;,\&quot;method\&quot;:\&quot;message\&quot;,\&quot;active_grant\&quot;:\&quot;ip_messaging\&quot;,\&quot;payload_type\&quot;:\&quot;application/json\&quot;,\&quot;http_request\&quot;:{\&quot;host\&quot;:\&quot;cds.us1.twilio.com\&quot;,\&quot;path\&quot;:\&quot;/v3/Services/${ServiceSIDString1}/Lists/${SID}/Context\&quot;,\&quot;method\&quot;:\&quot;GET\&quot;,\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;application/json\&quot;,\&quot;Twilio-Sync-Client-Info\&quot;:\&quot;&quot;;
	  String str2=&quot;{\&quot;sdk\&quot;:\&quot;js\&quot;,\&quot;sdkVer\&quot;:\&quot;0.8.5\&quot;,\&quot;os\&quot;:\&quot;Windows\&quot;,\&quot;osVer\&quot;:\&quot;10\&quot;,\&quot;pl\&quot;:\&quot;Chrome\&quot;,\&quot;plVer\&quot;:\&quot;71.0.3578.98\&quot;}&quot;;
String str3=	  &quot;\&quot;,\&quot;Twilio-Request-Id\&quot;:\&quot;RQ${__RandomString(32,123456789qwertyuiopasdfghjklzxcvbnm,)}\&quot;}},\&quot;payload_size\&quot;:0}..&quot;;
//String str2changed=str2.replace(&quot;\&quot;&quot;,&quot;\\\&quot;&quot;);
	  String str= str1+str2+str3;
	  //log.info(&quot;***************4th request GetContextFrame message text input : &quot; + str);
	  char[] chars1 = str1.toCharArray();
	  char[] chars2 = str2.toCharArray();
	  char[] chars3 = str3.toCharArray();			  
	  StringBuffer hexconverted1 = new StringBuffer();
	  for(int i = 0; i &lt; chars1.length; i++){
	  	
		  hexconverted1.append(&quot;0x&quot;+Integer.toHexString((int)chars1[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted2 = new StringBuffer();
	  for(int i = 0; i &lt; chars2.length; i++){
	  	
		  hexconverted2.append(&quot;0x&quot;+Integer.toHexString((int)chars2[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted3 = new StringBuffer();
	  for(int i = 0; i &lt; chars3.length; i++){
	  	
		  hexconverted3.append(&quot;0x&quot;+Integer.toHexString((int)chars3[i])+&quot; &quot;);
	  }
	  String hexas1=hexconverted1.toString();
	  String hexas2=hexconverted2.toString().replace(&quot;0x22&quot;,&quot;0x5c 0x22&quot;);
	  String hexas3=hexconverted3.toString();
	  String hexconverted = hexas1+hexas2+hexas3;
	////log.info(&quot;Text Message:&quot;+hexconverted);
	// //log.info(&quot;GetContextFrame Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;GetContextFrame&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 vars.put(&quot;GetContextFrameTXT&quot;,str);

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="ProcessBinaryResponse" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">byte[] firstFrameResponse = prev.getResponseData();
String s = new String(firstFrameResponse);

//log.info(&quot;Response : &quot;+s);
if(s.contains(&quot;200&quot;)){
AssertionResult.setFailure(false);
}
else{
AssertionResult.setFailure(true);
}
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">
byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
//log.info(&quot;***************4th Get context Response : &quot;+text);
if(text.contains(&quot;\&quot;code\&quot;:200,\&quot;status\&quot;:\&quot;OK\&quot;&quot;)){
AssertionResult.setFailure(false);

}
else{
AssertionResult.setFailure(true);
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.regex.Pattern;
import java.util.regex.Matcher;

byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
//String text    =s;                ;
//&quot;https://cds.us1.twilio.com/v3/Services/IS88dff50e283c41b5b8b7d11b3479667f/Lists/SH7903960a83c941f2bea3050451dabd9a\&quot;
String ServiceSIDString1 = &quot;.com/v3/Services/(.+?)/Lists&quot;;
String SID=&quot;\&quot;sid\&quot;:\&quot;(.+?)\&quot;&quot;;

        Pattern pattern = Pattern.compile(ServiceSIDString1);
        Matcher matcher = pattern.matcher(text);
        
        Pattern pattern2 = Pattern.compile(SID);
        Matcher matcher2 = pattern2.matcher(text);

        while(matcher.find()) {
            //log.info(&quot;ServiceSIDString1: &quot; + matcher.group(1));
             vars.put(&quot;ServiceSIDString1&quot;,matcher.group(1));                 
        }
        while(matcher2.find()) {
            //log.info(&quot;SID: &quot; + matcher2.group(1));
            vars.put(&quot;SID&quot;,matcher2.group(1));
                   
        }
      
        
   
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="5th Frame: Get Subscriptions" enabled="true">
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="TLS">true</boolProp>
            <stringProp name="server">tsock.us1.twilio</stringProp>
            <stringProp name="port">443</stringProp>
            <stringProp name="path">/v3/wsconnect</stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${GetSubscriptionFrame}</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">SecureATT=${c_authToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">	//Actual Msg TWILSOCK V3.0 487..{&quot;id&quot;:&quot;TM9d9c757d-dee2-4c45-8e94-63ffd01782de&quot;,&quot;method&quot;:&quot;message&quot;,&quot;active_grant&quot;:&quot;ip_messaging&quot;,&quot;payload_type&quot;:&quot;application/json&quot;,&quot;http_request&quot;:{&quot;host&quot;:&quot;cds.us1.twilio.com&quot;,&quot;path&quot;:&quot;/v4/Subscriptions&quot;,&quot;method&quot;:&quot;POST&quot;,&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;application/json&quot;,&quot;Twilio-Sync-Client-Info&quot;:&quot;{\&quot;sdk\&quot;:\&quot;js\&quot;,\&quot;sdkVer\&quot;:\&quot;0.8.5\&quot;,\&quot;os\&quot;:\&quot;Windows\&quot;,\&quot;osVer\&quot;:\&quot;10\&quot;,\&quot;pl\&quot;:\&quot;Chrome\&quot;,\&quot;plVer\&quot;:\&quot;71.0.3578.98\&quot;}&quot;,&quot;Twilio-Request-Id&quot;:&quot;RQ7c8f3b0caa3f4bad953afb036ba39f1d&quot;}},&quot;payload_size&quot;:220}..{&quot;event_protocol_version&quot;:3,&quot;action&quot;:&quot;establish&quot;,&quot;correlation_id&quot;:1549889607407,&quot;retried_requests&quot;:0,&quot;ttl_in_s&quot;:-1,&quot;requests&quot;:[{&quot;object_sid&quot;:&quot;SH9958c7d69210445fb06f98ade18bd814&quot;,&quot;object_type&quot;:&quot;list&quot;,&quot;last_event_id&quot;:-1}]}
	  String id=&quot;TM&quot;+&quot;${__UUID}&quot;;
	  String str1 = &quot;TWILSOCK V3.0 487..{\&quot;id\&quot;:\&quot;&quot;+id+&quot;\&quot;,\&quot;method\&quot;:\&quot;message\&quot;,\&quot;active_grant\&quot;:\&quot;ip_messaging\&quot;,\&quot;payload_type\&quot;:\&quot;application/json\&quot;,\&quot;http_request\&quot;:{\&quot;host\&quot;:\&quot;cds.us1.twilio.com\&quot;,\&quot;path\&quot;:\&quot;/v4/Subscriptions\&quot;,\&quot;method\&quot;:\&quot;POST\&quot;,\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;application/json\&quot;,\&quot;Twilio-Sync-Client-Info\&quot;:\&quot;&quot;;
	  String str2=&quot;{\&quot;sdk\&quot;:\&quot;js\&quot;,\&quot;sdkVer\&quot;:\&quot;0.8.5\&quot;,\&quot;os\&quot;:\&quot;Windows\&quot;,\&quot;osVer\&quot;:\&quot;10\&quot;,\&quot;pl\&quot;:\&quot;Chrome\&quot;,\&quot;plVer\&quot;:\&quot;71.0.3578.98\&quot;}&quot;;
String str3=	  &quot;\&quot;,\&quot;Twilio-Request-Id\&quot;:\&quot;RQ${__RandomString(32,123456789qwertyuiopasdfghjklzxcvbnm,)}\&quot;}},\&quot;payload_size\&quot;:220}..{\&quot;event_protocol_version\&quot;:3,\&quot;action\&quot;:\&quot;establish\&quot;,\&quot;correlation_id\&quot;:1549889607407,\&quot;retried_requests\&quot;:0,\&quot;ttl_in_s\&quot;:-1,\&quot;requests\&quot;:[{\&quot;object_sid\&quot;:\&quot;${SID}\&quot;,\&quot;object_type\&quot;:\&quot;list\&quot;,\&quot;last_event_id\&quot;:-1}]}&quot;;
//String str2changed=str2.replace(&quot;\&quot;&quot;,&quot;\\\&quot;&quot;);
	  String str= str1+str2+str3;
	  ////log.info(&quot;GetSubscriptionFrame message text input : &quot; + str);
	  //log.info(&quot;***********5th request :GetSubscriptionFrame message text input &quot; + str);
	  char[] chars1 = str1.toCharArray();
	  char[] chars2 = str2.toCharArray();
	  char[] chars3 = str3.toCharArray();			  
	  StringBuffer hexconverted1 = new StringBuffer();
	  for(int i = 0; i &lt; chars1.length; i++){
	  	
		  hexconverted1.append(&quot;0x&quot;+Integer.toHexString((int)chars1[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted2 = new StringBuffer();
	  for(int i = 0; i &lt; chars2.length; i++){
	  	
		  hexconverted2.append(&quot;0x&quot;+Integer.toHexString((int)chars2[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted3 = new StringBuffer();
	  for(int i = 0; i &lt; chars3.length; i++){
	  	
		  hexconverted3.append(&quot;0x&quot;+Integer.toHexString((int)chars3[i])+&quot; &quot;);
	  }
	  String hexas1=hexconverted1.toString();
	  String hexas2=hexconverted2.toString().replace(&quot;0x22&quot;,&quot;0x5c 0x22&quot;);
	  String hexas3=hexconverted3.toString();
	  String hexconverted = hexas1+hexas2+hexas3;
	////log.info(&quot;Text Message:&quot;+hexconverted);
	// //log.info(&quot;GetSubscriptionFrame Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;GetSubscriptionFrame&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 vars.put(&quot;GetSubscriptionFrameTXT&quot;,str);

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="ProcessBinaryResponse" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">byte[] firstFrameResponse = prev.getResponseData();
String s = new String(firstFrameResponse);

//log.info(&quot;Response : &quot;+s);
if(s.contains(&quot;200&quot;)){
AssertionResult.setFailure(false);
}
else{
AssertionResult.setFailure(true);
}
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">
byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
//log.info(&quot;***********5th request response:GetSubscriptionFrame message text response &quot; + text);
if(text.contains(&quot;\&quot;code\&quot;:200,\&quot;status\&quot;:\&quot;OK\&quot;&quot;)){
AssertionResult.setFailure(false);

}
else{
AssertionResult.setFailure(true);
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.regex.Pattern;
import java.util.regex.Matcher;

byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
//String text    =s;                ;
//&quot;https://cds.us1.twilio.com/v3/Services/IS88dff50e283c41b5b8b7d11b3479667f/Lists/SH7903960a83c941f2bea3050451dabd9a\&quot;
String ServiceSIDString1 = &quot;.com/v3/Services/(.+?)/Lists&quot;;
String SID=&quot;\&quot;sid\&quot;:\&quot;(.+?)\&quot;&quot;;

        Pattern pattern = Pattern.compile(ServiceSIDString1);
        Matcher matcher = pattern.matcher(text);
        
        Pattern pattern2 = Pattern.compile(SID);
        Matcher matcher2 = pattern2.matcher(text);

        while(matcher.find()) {
            //log.info(&quot;ServiceSIDString1: &quot; + matcher.group(1));
             vars.put(&quot;ServiceSIDString1&quot;,matcher.group(1));                 
        }
        while(matcher2.find()) {
            //log.info(&quot;SID: &quot; + matcher2.group(1));
            vars.put(&quot;SID&quot;,matcher2.group(1));
                   
        }
      
        
   
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="6th Frame- single read sampler to get the twi io.sync.event from server" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <boolProp name="createNewConnection">false</boolProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="optional">false</boolProp>
            <stringProp name="dataType">Binary</stringProp>
          </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.regex.Pattern;
import java.util.regex.Matcher;

byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
//log.info(&quot;***********6th response :Reply captured as twilio event text &quot; + text);
////log.info(&quot;Reply captured as twilio event text &quot; + text);
//String text    =s;                ;
//&quot;userInfosToSubscribe&quot;:100,&quot;userInfo&quot;:&quot;USdd2539331ab149b6bff0068f8fafa3a7.info&quot;
//TWILSOCK V3.0 181{&quot;method&quot;:&quot;notification&quot;,&quot;id&quot;:&quot;TM8c5b8411fc224fc7a95e1d5bce11c42f&quot;,&quot;payload_size&quot;:1181,&quot;payload_type&quot;:&quot;application/json&quot;,&quot;message_type&quot;:&quot;twilio.sync.event&quot;,&quot;notification_ctx_id&quot;:&quot;&quot;}{&quot;event_type&quot;:&quot;list_context_updated&quot;,&quot;correlation_id&quot;:1549889607407,&quot;event_protocol_version&quot;:3,&quot;event&quot;:{&quot;context_data&quot;:{&quot;myChannels&quot;:&quot;00bb4420-d004-0000-0000-000000000000.channels&quot;,&quot;consumptionReportInterval&quot;:&quot;PT1S&quot;,&quot;userInfosToSubscribe&quot;:100,&quot;userInfo&quot;:&quot;USdd2539331ab149b6bff0068f8fafa3a7.info&quot;,&quot;reachabilityEnabled&quot;:true,&quot;apiVersion&quot;:&quot;3&quot;,&quot;channels&quot;:&quot;channels&quot;,&quot;httpCacheInterval&quot;:&quot;PT1S&quot;,&quot;identity&quot;:&quot;00bb4420-d004-0000-0000-000000000000&quot;,&quot;links&quot;:{&quot;syncListUrl&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Users/USdd2539331ab149b6bff0068f8fafa3a7/SyncList&quot;,&quot;myChannelsUrl&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Users/USdd2539331ab149b6bff0068f8fafa3a7/Channels&quot;,&quot;publicChannelsUrl&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Channels&quot;,&quot;usersUrl&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Users&quot;,&quot;typingUrl&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Typing&quot;,&quot;mediaServiceUrl&quot;:&quot;/v1/Services/IS88dff50e283c41b5b8b7d11b3479667f/Media&quot;},&quot;type&quot;:&quot;IpMsgSession&quot;,&quot;endpointPlatform&quot;:&quot;js|3.1.0|Windows 1064-bit|Chrome|71.0.3578.98&quot;},&quot;date_created&quot;:&quot;2019-02-13T13:29:00.236Z&quot;,&quot;list_sid&quot;:&quot;SHc87d67daea6c4ab39bc69526d3084553&quot;,&quot;id&quot;:0,&quot;list_revision&quot;:&quot;1&quot;}}
String myChannels = &quot;\&quot;identity\&quot;:\&quot;(.+?)\&quot;,&quot;;
String userInfo = &quot;Users/(.+?)/&quot;;
String TMid=&quot;\&quot;id\&quot;:\&quot;(.+?)\&quot;,\&quot;payload&quot;;

        Pattern pattern = Pattern.compile(myChannels);
        Matcher matcher = pattern.matcher(text);
        
        Pattern pattern2 = Pattern.compile(TMid);
        Matcher matcher2 = pattern2.matcher(text);
       
        Pattern pattern3 = Pattern.compile(userInfo);
        Matcher matcher3 = pattern3.matcher(text);
 	
 		while(matcher.find()) {
            //log.info(&quot;myChannels: &quot; + matcher.group(1));
            vars.put(&quot;myChannels&quot;,matcher.group(1));
                   
        }
        
        while(matcher2.find()) {
            //log.info(&quot;TMid: &quot; + matcher2.group(1));
            vars.put(&quot;TMid&quot;,matcher2.group(1));
                   
        }

        while(matcher3.find()) {
            //log.info(&quot;userInfo: &quot; + matcher3.group(1));
            vars.put(&quot;userInfo&quot;,matcher3.group(1));
                   
        }</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="6th Frame- single write sampler to reply to twi io.sync.event" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${replyTwilioevent}</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">	  //String id=&quot;TM&quot;+&quot;${__UUID}&quot;;  
	  String str = &quot;TWILSOCK V3.0 147..{\&quot;id\&quot;:\&quot;${TMid}\&quot;,\&quot;method\&quot;:\&quot;reply\&quot;,\&quot;payload_type\&quot;:\&quot;application/json\&quot;,\&quot;status\&quot;:{\&quot;code\&quot;:200,\&quot;status\&quot;:\&quot;OK\&quot;},\&quot;payload_size\&quot;:0}..&quot;;  
	 //log.info(&quot;***********6th request:Reply to twilio event text input &quot; + str);
	  ////log.info(&quot;Reply to twilio event text input : &quot; + str);
	  char[] chars = str.toCharArray();	  
	  StringBuffer hexconverted = new StringBuffer();
	  for(int i = 0; i &lt; chars.length; i++){
	  	
		  hexconverted.append(&quot;0x&quot;+Integer.toHexString((int)chars[i])+&quot; &quot;);
	  }
	  
	 ////log.info(&quot;First message Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;replyTwilioevent&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 vars.put(&quot;replyTwilioeventTXT&quot;,str);

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="7th Frame- single read sampler to get the twi io.sync.event from server" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <boolProp name="createNewConnection">false</boolProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="optional">false</boolProp>
            <stringProp name="dataType">Binary</stringProp>
          </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.regex.Pattern;
import java.util.regex.Matcher;

byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
//log.info(&quot;***********7th response :Reply captured to get the twi io.sync.event from server&quot; + text);
//String text    =s;                ;
//
//String userID = &quot;userInfo\&quot;:\&quot;(.+?).info&quot;;
String TMid2=&quot;\&quot;id\&quot;:\&quot;(.+?)\&quot;,\&quot;payload&quot;;

        //Pattern pattern = Pattern.compile(myChannels);
        //Matcher matcher = pattern.matcher(text);
        
        Pattern pattern2 = Pattern.compile(TMid2);
        Matcher matcher2 = pattern2.matcher(text);

        
        while(matcher2.find()) {
			//log.info(&quot;TMid2: &quot; + matcher2.group(1));
                vars.put(&quot;TMid2&quot;,matcher2.group(1));
                   
        }
               
   
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="7th Frame- single write sampler to reply to twi io.sync.event" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${replyTwilioevent2}</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">	  //String id=&quot;TM&quot;+&quot;${__UUID}&quot;;  
	  String str = &quot;TWILSOCK V3.0 147..{\&quot;id\&quot;:\&quot;${TMid2}\&quot;,\&quot;method\&quot;:\&quot;reply\&quot;,\&quot;payload_type\&quot;:\&quot;application/json\&quot;,\&quot;status\&quot;:{\&quot;code\&quot;:200,\&quot;status\&quot;:\&quot;OK\&quot;},\&quot;payload_size\&quot;:0}..&quot;;  
	 //log.info(&quot;***********7th request:Reply to twilio event text input &quot; + str);
	  ////log.info(&quot;Reply to twilio event text input : &quot; + str);
	  char[] chars = str.toCharArray();	  
	  StringBuffer hexconverted = new StringBuffer();
	  for(int i = 0; i &lt; chars.length; i++){
	  	
		  hexconverted.append(&quot;0x&quot;+Integer.toHexString((int)chars[i])+&quot; &quot;);
	  }
	  
	 ////log.info(&quot;First message Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;replyTwilioevent2&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 vars.put(&quot;replyTwilioevent2TXT&quot;,str);

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="8th Frame- single write sampler to pu t_notification_c tx" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${putNotificationctx}</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">	//Actual Msg TWILSOCK V3.0 324..{&quot;id&quot;:&quot;TM14f7f144-c34f-491b-a362-3a181a7cfccd&quot;,&quot;method&quot;:&quot;message&quot;,&quot;active_grant&quot;:&quot;ip_messaging&quot;,&quot;payload_type&quot;:&quot;application/json&quot;,&quot;http_request&quot;:{&quot;host&quot;:&quot;aim.twilio.com&quot;,&quot;path&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Users/USdd2539331ab149b6bff0068f8fafa3a7/Channels&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;headers&quot;:{}},&quot;payload_size&quot;:0}..
	   String id=&quot;TM&quot;+&quot;${__UUID}&quot;;  
	  String str = &quot;TWILSOCK V3.0 159..{\&quot;method\&quot;:\&quot;put_notification_ctx\&quot;,\&quot;notification_ctx_id\&quot;:\&quot;${__UUID}\&quot;,\&quot;id\&quot;:\&quot;&quot;+id+&quot;\&quot;,\&quot;payload_size\&quot;:351}..{\&quot;product_id\&quot;:\&quot;ip_messaging\&quot;,\&quot;notification_protocol_version\&quot;:4,\&quot;endpoint_platform\&quot;:\&quot;Mozilla/5.0 (Windows NT10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\&quot;,\&quot;message_types\&quot;:[\&quot;twilio.sync.event\&quot;,\&quot;com.twilio.rtd.cds.document\&quot;,\&quot;com.twilio.rtd.cds.list\&quot;,\&quot;com.twilio.rtd.cds.map\&quot;,\&quot;twilio.ipmsg.typing_indicator\&quot;]}&quot;;  
	 // //log.info(&quot;length:&quot;+str.length());
	 //log.info(&quot;***********8th Request :put_notification_ctx text input&quot; + str);
	//  //log.info(&quot;8th frame- put_notification_ctx message text input : &quot; + str);
	  char[] chars = str.toCharArray();	  
	  StringBuffer hexconverted = new StringBuffer();
	  for(int i = 0; i &lt; chars.length; i++){
	  	
		  hexconverted.append(&quot;0x&quot;+Integer.toHexString((int)chars[i])+&quot; &quot;);
	  }
	////log.info(&quot;Text Message:&quot;+hexconverted);
	// //log.info(&quot;GetChanelFrame Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;putNotificationctx&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 vars.put(&quot;putNotificationctxTXT&quot;,str);

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="9th Frame- single write sampler to get maps" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${getMapsFrame}</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">	  String id=&quot;TM&quot;+&quot;${__UUID}&quot;;
	  String str1 = &quot;TWILSOCK V3.0 544..{\&quot;id\&quot;:\&quot;&quot;+id+&quot;\&quot;,\&quot;method\&quot;:\&quot;message\&quot;,\&quot;active_grant\&quot;:\&quot;ip_messaging\&quot;,\&quot;payload_type\&quot;:\&quot;application/json\&quot;,\&quot;http_request\&quot;:{\&quot;host\&quot;:\&quot;cds.us1.twilio.com\&quot;,\&quot;path\&quot;:\&quot;/v3/Maps/${userInfo}.info\&quot;,\&quot;method\&quot;:\&quot;GET\&quot;,\&quot;params\&quot;:{\&quot;Include\&quot;:\&quot;items\&quot;},\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;application/json\&quot;,\&quot;Twilio-Sync-Client-Info\&quot;:\&quot;&quot;;
	  String str2=&quot;{\&quot;sdk\&quot;:\&quot;js\&quot;,\&quot;sdkVer\&quot;:\&quot;0.8.5\&quot;,\&quot;os\&quot;:\&quot;Windows\&quot;,\&quot;osVer\&quot;:\&quot;10\&quot;,\&quot;pl\&quot;:\&quot;Chrome\&quot;,\&quot;plVer\&quot;:\&quot;71.0.3578.98\&quot;}&quot;;
String str3=	  &quot;\&quot;,\&quot;Twilio-Request-Id\&quot;:\&quot;RQ${__RandomString(32,123456789qwertyuiopasdfghjklzxcvbnm,)}\&quot;}},\&quot;payload_size\&quot;:0}..&quot;;
//String str2changed=str2.replace(&quot;\&quot;&quot;,&quot;\\\&quot;&quot;);
	  String str= str1+str2+str3;
	  //log.info(&quot;***********9th Request :getMapsFrame text input&quot; + str);
	  ////log.info(&quot;getMapsFrame message text input : &quot; + str);
	  char[] chars1 = str1.toCharArray();
	  char[] chars2 = str2.toCharArray();
	  char[] chars3 = str3.toCharArray();			  
	  StringBuffer hexconverted1 = new StringBuffer();
	  for(int i = 0; i &lt; chars1.length; i++){
	  	
		  hexconverted1.append(&quot;0x&quot;+Integer.toHexString((int)chars1[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted2 = new StringBuffer();
	  for(int i = 0; i &lt; chars2.length; i++){
	  	
		  hexconverted2.append(&quot;0x&quot;+Integer.toHexString((int)chars2[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted3 = new StringBuffer();
	  for(int i = 0; i &lt; chars3.length; i++){
	  	
		  hexconverted3.append(&quot;0x&quot;+Integer.toHexString((int)chars3[i])+&quot; &quot;);
	  }
	  String hexas1=hexconverted1.toString();
	  String hexas2=hexconverted2.toString().replace(&quot;0x22&quot;,&quot;0x5c 0x22&quot;);
	  String hexas3=hexconverted3.toString();
	  String hexconverted = hexas1+hexas2+hexas3;
	////log.info(&quot;Text Message:&quot;+hexconverted);
	// //log.info(&quot;GetSubscriptionFrame Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;getMapsFrame&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 vars.put(&quot;getMapsFrameTXT&quot;,str);

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="10th Frame- single write sampler toget Maps 2" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${getMaps2Frame}</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">	  //String id=&quot;TM&quot;+&quot;${__UUID}&quot;;
	  //TWILSOCK V3.0 521..{\&quot;id\&quot;:\&quot;TM44addc44-a9f2-43d4-b6d4-8455fb6eb410\&quot;,\&quot;method\&quot;:\&quot;message\&quot;,\&quot;active_grant\&quot;:\&quot;ip_messaging\&quot;,\&quot;payload_type\&quot;:\&quot;application/json\&quot;,\&quot;http_request\&quot;:{\&quot;host\&quot;:\&quot;cds.us1.twilio.com\&quot;,\&quot;path\&quot;:\&quot;/v3/Maps/00bb4420-d004-0000-0000-000000000000.channels\&quot;,\&quot;method\&quot;:\&quot;GET\&quot;,\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;application/json\&quot;,\&quot;Twilio-Sync-Client-Info\&quot;:\&quot;{\\\&quot;sdk\\\&quot;:\\\&quot;js\\\&quot;,\\\&quot;sdkVer\\\&quot;:\\\&quot;0.8.5\\\&quot;,\\\&quot;os\\\&quot;:\\\&quot;Windows\\\&quot;,\\\&quot;osVer\\\&quot;:\\\&quot;10\\\&quot;,\\\&quot;pl\\\&quot;:\\\&quot;Chrome\\\&quot;,\\\&quot;plVer\\\&quot;:\\\&quot;71.0.3578.98\\\&quot;}\&quot;,\&quot;Twilio-Request-Id\&quot;:\&quot;RQ7e15196d92a2450eabc39f0848b83713\&quot;}},\&quot;payload_size\&quot;:0}..  
	  String id=&quot;TM&quot;+&quot;${__UUID}&quot;;
	  String str1 = &quot;TWILSOCK V3.0 521..{\&quot;id\&quot;:\&quot;&quot;+id+&quot;\&quot;,\&quot;method\&quot;:\&quot;message\&quot;,\&quot;active_grant\&quot;:\&quot;ip_messaging\&quot;,\&quot;payload_type\&quot;:\&quot;application/json\&quot;,\&quot;http_request\&quot;:{\&quot;host\&quot;:\&quot;cds.us1.twilio.com\&quot;,\&quot;path\&quot;:\&quot;/v3/Maps/${myChannels}.channels\&quot;,\&quot;method\&quot;:\&quot;GET\&quot;,\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;application/json\&quot;,\&quot;Twilio-Sync-Client-Info\&quot;:\&quot;&quot;;
	  String str2=&quot;{\&quot;sdk\&quot;:\&quot;js\&quot;,\&quot;sdkVer\&quot;:\&quot;0.8.5\&quot;,\&quot;os\&quot;:\&quot;Windows\&quot;,\&quot;osVer\&quot;:\&quot;10\&quot;,\&quot;pl\&quot;:\&quot;Chrome\&quot;,\&quot;plVer\&quot;:\&quot;71.0.3578.98\&quot;}&quot;;
String str3=	  &quot;\&quot;,\&quot;Twilio-Request-Id\&quot;:\&quot;RQ${__RandomString(32,123456789qwertyuiopasdfghjklzxcvbnm,)}\&quot;}},\&quot;payload_size\&quot;:0}...&quot;;
//String str2changed=str2.replace(&quot;\&quot;&quot;,&quot;\\\&quot;&quot;);
	  String str= str1+str2+str3;
	  	  //log.info(&quot;***********10th Request :getMaps2Frame text input&quot; + str);
	 // //log.info(&quot;getMaps2Frame message text input : &quot; + str);
	  char[] chars1 = str1.toCharArray();
	  char[] chars2 = str2.toCharArray();
	  char[] chars3 = str3.toCharArray();			  
	  StringBuffer hexconverted1 = new StringBuffer();
	  for(int i = 0; i &lt; chars1.length; i++){
	  	
		  hexconverted1.append(&quot;0x&quot;+Integer.toHexString((int)chars1[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted2 = new StringBuffer();
	  for(int i = 0; i &lt; chars2.length; i++){
	  	
		  hexconverted2.append(&quot;0x&quot;+Integer.toHexString((int)chars2[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted3 = new StringBuffer();
	  for(int i = 0; i &lt; chars3.length; i++){
	  	
		  hexconverted3.append(&quot;0x&quot;+Integer.toHexString((int)chars3[i])+&quot; &quot;);
	  }
	  String hexas1=hexconverted1.toString();
	  String hexas2=hexconverted2.toString().replace(&quot;0x22&quot;,&quot;0x5c 0x22&quot;);
	  String hexas3=hexconverted3.toString();
	  String hexconverted = hexas1+hexas2+hexas3;
	////log.info(&quot;Text Message:&quot;+hexconverted);
	// //log.info(&quot;GetSubscriptionFrame Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;getMaps2Frame&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 vars.put(&quot;getMaps2FrameTXT&quot;,str);

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="11th Frame: Get Channel" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${GetChanelFrame}</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">	//Actual Msg TWILSOCK V3.0 324..{&quot;id&quot;:&quot;TM14f7f144-c34f-491b-a362-3a181a7cfccd&quot;,&quot;method&quot;:&quot;message&quot;,&quot;active_grant&quot;:&quot;ip_messaging&quot;,&quot;payload_type&quot;:&quot;application/json&quot;,&quot;http_request&quot;:{&quot;host&quot;:&quot;aim.twilio.com&quot;,&quot;path&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Users/USdd2539331ab149b6bff0068f8fafa3a7/Channels&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;headers&quot;:{}},&quot;payload_size&quot;:0}..
	   String id=&quot;TM&quot;+&quot;${__UUID}&quot;;  
	  String str = &quot;TWILSOCK V3.0 324..{\&quot;id\&quot;:\&quot;&quot;+id+&quot;\&quot;,\&quot;method\&quot;:\&quot;message\&quot;,\&quot;active_grant\&quot;:\&quot;ip_messaging\&quot;,\&quot;payload_type\&quot;:\&quot;application/json\&quot;,\&quot;http_request\&quot;:{\&quot;host\&quot;:\&quot;aim.twilio.com\&quot;,\&quot;path\&quot;:\&quot;/v1/Instances/${ServiceSIDString1}/Users/${userInfo}/Channels\&quot;,\&quot;method\&quot;:\&quot;GET\&quot;,\&quot;headers\&quot;:{}},\&quot;payload_size\&quot;:0}..&quot;;  
	 // //log.info(&quot;length:&quot;+str.length());
	  //log.info(&quot;***********11th Request :GetChanelFrame text input&quot; + str);
	  ////log.info(&quot;GetChanelFrame message text input : &quot; + str);
	  char[] chars = str.toCharArray();	  
	  StringBuffer hexconverted = new StringBuffer();
	  for(int i = 0; i &lt; chars.length; i++){
	  	
		  hexconverted.append(&quot;0x&quot;+Integer.toHexString((int)chars[i])+&quot; &quot;);
	  }
	////log.info(&quot;Text Message:&quot;+hexconverted);
	// //log.info(&quot;GetChanelFrame Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;GetChanelFrame&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 vars.put(&quot;GetChanelFrameTXT&quot;,str);

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="12th Frame- single read sampler to get the chanel info" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <boolProp name="createNewConnection">false</boolProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="optional">false</boolProp>
            <stringProp name="dataType">Binary</stringProp>
          </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.regex.Pattern;
import java.util.regex.Matcher;

byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
  //log.info(&quot;***********12th Frame response :GetChanelFrame text &quot; + text);
  vars.put(&quot;allReadData&quot;,text);
  /*
////log.info(&quot;Response captured for the get channel info request &quot; + text);
//String text    =s;                ;
//181..{&quot;method&quot;:&quot;notification&quot;,&quot;id&quot;:&quot;TM593623442dd1483b8e146cb9340bf415&quot;,&quot;payload_size&quot;:1182,&quot;payload_type&quot;:&quot;application/json&quot;,&quot;message_type&quot;:&quot;twilio.sync.event&quot;,&quot;notification_ctx_id&quot;:&quot;&quot;}..{&quot;event_type&quot;:&quot;list_context_updated&quot;,&quot;correlation_id&quot;:1549889607407,&quot;event_protocol_version&quot;:3,&quot;event&quot;:{&quot;context_data&quot;:{&quot;myChannels&quot;:&quot;00bb4420-d004-0000-0000-000000000000.channels&quot;,&quot;consumptionReportInterval&quot;:&quot;PT1S&quot;,&quot;userInfosToSubscribe&quot;:100,&quot;userInfo&quot;:&quot;USdd2539331ab149b6bff0068f8fafa3a7.info&quot;,&quot;reachabilityEnabled&quot;:true,&quot;apiVersion&quot;:&quot;3&quot;,&quot;channels&quot;:&quot;channels&quot;,&quot;httpCacheInterval&quot;:&quot;PT1S&quot;,&quot;identity&quot;:&quot;00bb4420-d004-0000-0000-000000000000&quot;,&quot;links&quot;:{&quot;syncListUrl&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Users/USdd2539331ab149b6bff0068f8fafa3a7/SyncList&quot;,&quot;myChannelsUrl&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Users/USdd2539331ab149b6bff0068f8fafa3a7/Channels&quot;,&quot;publicChannelsUrl&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Channels&quot;,&quot;usersUrl&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Users&quot;,&quot;typingUrl&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Typing&quot;,&quot;mediaServiceUrl&quot;:&quot;/v1/Services/IS88dff50e283c41b5b8b7d11b3479667f/Media&quot;},&quot;type&quot;:&quot;IpMsgSession&quot;,&quot;endpointPlatform&quot;:&quot;js|3.1.0|Windows 10 64-bit|Chrome|71.0.3578.98&quot;},&quot;date_created&quot;:&quot;2019-02-11T12:53:26.980Z&quot;,&quot;list_sid&quot;:&quot;SH9958c7d69210445fb06f98ade18bd814&quot;,&quot;id&quot;:0,&quot;list_revision&quot;:&quot;1&quot;}}..
String Channelsid = &quot;{\&quot;channel_sid\&quot;:\&quot;(.+?)\&quot;&quot;;
String userInfo=&quot;userInfo\&quot;:\&quot;(.+?).info\&quot;,&quot;;

        Pattern pattern = Pattern.compile(Channelsid);
        Matcher matcher = pattern.matcher(text);
        
        Pattern pattern2 = Pattern.compile(userInfo);
        Matcher matcher2 = pattern2.matcher(text);

        while(matcher.find()) {
        //log.info(&quot;Channelsid: &quot; + matcher.group(1));
             vars.put(&quot;Channelsid&quot;,matcher.group(1));                 
        }
            
        while(matcher2.find()) {
            //log.info(&quot;userInfo: &quot; + matcher2.group(1));
            vars.put(&quot;userInfo&quot;,matcher2.group(1));
                   
        }
        
      
*/        
   
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="11th Frame- single read sampler to get the Maps 2 response" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <boolProp name="createNewConnection">false</boolProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="optional">false</boolProp>
            <stringProp name="dataType">Binary</stringProp>
          </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.regex.Pattern;
import java.util.regex.Matcher;

byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
//log.info(&quot;***********11th Frame response :eply captured as Mape 2 text &quot; + text);
String combined=text+vars.get(&quot;allReadData&quot;);
vars.put(&quot;allReadData&quot;,combined);
/*
String Channelsid = &quot;{\&quot;channel_sid\&quot;:\&quot;(.+?)\&quot;&quot;;
String userInfo=&quot;userInfo\&quot;:\&quot;(.+?).info\&quot;,&quot;;

        Pattern pattern = Pattern.compile(Channelsid);
        Matcher matcher = pattern.matcher(text);
        
        Pattern pattern2 = Pattern.compile(userInfo);
        Matcher matcher2 = pattern2.matcher(text);

        while(matcher.find()) {
        //log.info(&quot;Channelsid: &quot; + matcher.group(1));
             vars.put(&quot;Channelsid&quot;,matcher.group(1));                 
        }
            
        while(matcher2.find()) {
            //log.info(&quot;userInfo: &quot; + matcher2.group(1));
            vars.put(&quot;userInfo&quot;,matcher2.group(1));
                   
        }
        
     */ 
        
   
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="9th Frame- single read sampler to get the put notification response." enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <boolProp name="createNewConnection">false</boolProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="optional">false</boolProp>
            <stringProp name="dataType">Binary</stringProp>
          </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.regex.Pattern;
import java.util.regex.Matcher;

byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
//log.info(&quot;***********9th Frame response :Reply captured 2 as put notification response&quot; + text);
String combined=text+vars.get(&quot;allReadData&quot;);
vars.put(&quot;allReadData&quot;,combined);
/*
String Channelsid = &quot;{\&quot;channel_sid\&quot;:\&quot;(.+?)\&quot;&quot;;
String userInfo=&quot;userInfo\&quot;:\&quot;(.+?).info\&quot;,&quot;;

        Pattern pattern = Pattern.compile(Channelsid);
        Matcher matcher = pattern.matcher(text);
        
        Pattern pattern2 = Pattern.compile(userInfo);
        Matcher matcher2 = pattern2.matcher(text);

        while(matcher.find()) {
        //log.info(&quot;Channelsid: &quot; + matcher.group(1));
             vars.put(&quot;Channelsid&quot;,matcher.group(1));                 
        }
            
        while(matcher2.find()) {
            //log.info(&quot;userInfo: &quot; + matcher2.group(1));
            vars.put(&quot;userInfo&quot;,matcher2.group(1));
                   
        }
      */  
      
        
   
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="10th Frame- single read sampler to get the get Maps response" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <boolProp name="createNewConnection">false</boolProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="optional">false</boolProp>
            <stringProp name="dataType">Binary</stringProp>
          </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.regex.Pattern;
import java.util.regex.Matcher;

byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
//log.info(&quot;***********10th Frame response :Reply captured for get maps&quot; + text);
////log.info(&quot;10th msg Reply captured for get maps response text &quot; + text);
String combined=text+vars.get(&quot;allReadData&quot;);
vars.put(&quot;allReadData&quot;,combined);
/*
String Channelsid = &quot;{\&quot;channel_sid\&quot;:\&quot;(.+?)\&quot;&quot;;
String userInfo=&quot;userInfo\&quot;:\&quot;(.+?).info\&quot;,&quot;;

        Pattern pattern = Pattern.compile(Channelsid);
        Matcher matcher = pattern.matcher(text);
        
        Pattern pattern2 = Pattern.compile(userInfo);
        Matcher matcher2 = pattern2.matcher(text);

        while(matcher.find()) {
        //log.info(&quot;Channelsid: &quot; + matcher.group(1));
             vars.put(&quot;Channelsid&quot;,matcher.group(1));                 
        }
            
        while(matcher2.find()) {
            //log.info(&quot;userInfo: &quot; + matcher2.group(1));
            vars.put(&quot;userInfo&quot;,matcher2.group(1));
                   
        }
        */
        
      
        
   
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Getting channel Id from combined response" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.*;
ArrayList channelsTotal=new ArrayList(); 
String text=vars.get(&quot;allReadData&quot;);
String Channelsid = &quot;\&quot;channel_sid\&quot;:\&quot;(.+?)\&quot;,\&quot;status\&quot;&quot;;
        Pattern pattern2 = Pattern.compile(Channelsid);
        Matcher matcher2 = pattern2.matcher(text);        
        while(matcher2.find()) {
	               channelsTotal.add(matcher2.group(1));
        }
     if(channelsTotal.size()==0){
     	//log.info(vars.get(&quot;P_Username&quot;)+&quot;Does not have any channel added&quot;);
        	vars.put(&quot;CreateChannelFlag&quot;,&quot;true&quot;);
        }else{
        int random = (int )(Math.random() * channelsTotal.size());
	   //log.info(&quot;channelsTotal.size()&quot;+channelsTotal.size()+&quot; random&quot;+random);
	   vars.put(&quot;Channelsid&quot;,channelsTotal.get(random));
        //log.info(&quot;Channelsid: &quot; +channelsTotal.get(random)); 	
        vars.put(&quot;CreateChannelFlag&quot;,&quot;false&quot;);
        }
       </stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- to create channel" enabled="true">
            <stringProp name="IfController.condition">&quot;${CreateChannelFlag}&quot;==&quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/express/v1/createchannel" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
			&quot;Users&quot;:[&#xd;
				&quot;${userId}&quot;,&#xd;
				&quot;${P_OtherUserID}&quot;&#xd;
]&#xd;
		}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">app-api/express/v1/createchannel</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Making FlagTosendOtherRequests as false." enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;FlagTosendOtherRequests&quot;,&quot;false&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="Actual Send Message Frame" enabled="true">
          <boolProp name="createNewConnection">false</boolProp>
          <boolProp name="TLS">true</boolProp>
          <stringProp name="server">tsock.us1.twilio</stringProp>
          <stringProp name="port">443</stringProp>
          <stringProp name="path">/v3/wsconnect</stringProp>
          <stringProp name="connectTimeout">20000</stringProp>
          <boolProp name="binaryPayload">true</boolProp>
          <stringProp name="requestData">${Message}</stringProp>
          <stringProp name="readTimeout">6000</stringProp>
          <boolProp name="loadDataFromFile">false</boolProp>
          <stringProp name="dataFile"></stringProp>
        </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">SecureATT=${c_authToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">	  String id=&quot;TM&quot;+&quot;${__UUID}&quot;;
	  String sendTime=&quot;${__time()}&quot;;
	 //String chanelID=vars.get(&quot;Channelsid&quot;);
	
	 //&quot;CH6e2a9a3aeef44ff498b7e96d447fe9da&quot;);
	
	  vars.put(&quot;SendTime&quot;,sendTime);
	  String str1 = &quot;TWILSOCK V3.0 564..{\&quot;id\&quot;:\&quot;&quot;+id+&quot;\&quot;,\&quot;method\&quot;:\&quot;message\&quot;,\&quot;active_grant\&quot;:\&quot;ip_messaging\&quot;,\&quot;payload_type\&quot;:\&quot;application/json\&quot;,\&quot;http_request\&quot;:{\&quot;host\&quot;:\&quot;cds.us1.twilio.com\&quot;,\&quot;path\&quot;:\&quot;/v3/Services/${ServiceSIDString1}/Lists/${SID}/Items\&quot;,\&quot;method\&quot;:\&quot;POST\&quot;,\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;application/json\&quot;,\&quot;Twilio-Sync-Client-Info\&quot;:\&quot;&quot;;
	  String str2=&quot;{\&quot;sdk\&quot;:\&quot;js\&quot;,\&quot;sdkVer\&quot;:\&quot;0.8.5\&quot;,\&quot;os\&quot;:\&quot;Windows\&quot;,\&quot;osVer\&quot;:\&quot;10\&quot;,\&quot;pl\&quot;:\&quot;Chrome\&quot;,\&quot;plVer\&quot;:\&quot;71.0.3578.98\&quot;}&quot;;
String str3=	  &quot;\&quot;,\&quot;Twilio-Request-Id\&quot;:\&quot;RQ${__RandomString(32,123456789qwertyuiopasdfghjklzxcvbnm,)}\&quot;}},\&quot;payload_size\&quot;:183}..{\&quot;data\&quot;:{\&quot;request\&quot;:{\&quot;channelSid\&quot;:\&quot;${Channelsid}\&quot;,\&quot;text\&quot;:\&quot;the msg${Counter}\&quot;,\&quot;attributes\&quot;:\&quot;{}\&quot;,\&quot;action\&quot;:\&quot;sendMessage\&quot;},\&quot;commandId\&quot;:\&quot;${__UUID}\&quot;}}&quot;;
//String str2changed=str2.replace(&quot;\&quot;&quot;,&quot;\\\&quot;&quot;);
	  String str= str1+str2+str3;
	  log.info(&quot;Message text input : &quot; + str);
	  char[] chars1 = str1.toCharArray();
	  char[] chars2 = str2.toCharArray();
	  char[] chars3 = str3.toCharArray();			  
	  StringBuffer hexconverted1 = new StringBuffer();
	  for(int i = 0; i &lt; chars1.length; i++){
	  	
		  hexconverted1.append(&quot;0x&quot;+Integer.toHexString((int)chars1[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted2 = new StringBuffer();
	  for(int i = 0; i &lt; chars2.length; i++){
	  	
		  hexconverted2.append(&quot;0x&quot;+Integer.toHexString((int)chars2[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted3 = new StringBuffer();
	  for(int i = 0; i &lt; chars3.length; i++){
	  	
		  hexconverted3.append(&quot;0x&quot;+Integer.toHexString((int)chars3[i])+&quot; &quot;);
	  }
	  String hexas1=hexconverted1.toString();
	  String hexas2=hexconverted2.toString().replace(&quot;0x22&quot;,&quot;0x5c 0x22&quot;);
	  String hexas3=hexconverted3.toString();
	  String hexconverted = hexas1+hexas2+hexas3;
	////log.info(&quot;Text Message:&quot;+hexconverted);
	// //log.info(&quot;message Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;Message&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 vars.put(&quot;MessageTXT&quot;,str);

	 </stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">byte[] firstFrameResponse = prev.getResponseData();
String s = new String(firstFrameResponse);
//log.info(&quot;Response actual frame: &quot;+s);
if(s.contains(&quot;\&quot;method\&quot;:\&quot;notification\&quot;&quot;)||s.contains(&quot;200&quot;)){
AssertionResult.setFailure(false);
vars.put(&quot;FlagTosendOtherRequests&quot;,&quot;false&quot;);

}
else{
AssertionResult.setFailure(true);
vars.put(&quot;FlagTosendOtherRequests&quot;,&quot;true&quot;);
}

String sendtime= vars.get(&quot;SendTime&quot;).trim();
String currentTime= &quot;${__time()}&quot;;
//log.info(&quot;sendtime&quot;+sendtime+&quot;currentTime&quot;+currentTime+&quot;.&quot;);
long MsgProcessTime=  Long.parseLong(currentTime)- Long.parseLong(sendtime);
//log.info(&quot;Total time taken to recieve the message:  &quot;+MsgProcessTime+&quot;ms&quot;);</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">byte[] firstFrameResponse = prev.getResponseData();
String s = new String(firstFrameResponse);
log.info(&quot;Response actual frame: &quot;+s);</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="jp@gc - Ultimate Thread Group" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="347609421">
            <stringProp name="51">3</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="1722">60</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="jp@gc - Throughput Shaping Timer" enabled="true">
          <collectionProp name="load_profile">
            <collectionProp name="141321280">
              <stringProp name="51">3</stringProp>
              <stringProp name="51">3</stringProp>
              <stringProp name="1722">60</stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.timers.VariableThroughputTimer>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">99</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">Counter</stringProp>
          <stringProp name="CounterConfig.format">00</stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="OOC- For login Request" enabled="true">
          <stringProp name="TestPlan.comments">Need to add login part to capture the sessionID
</stringProp>
        </OnceOnlyController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/account/signin" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">${P_Username}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="Argument.value">${P_Password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/account/signin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${P_Server}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userId</stringProp>
              <stringProp name="RegexExtractor.regex">userId&quot;:&quot;(.*?)&quot;}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOTFOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-836030906">userId</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/secure/Login" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">${P_Username}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="Argument.value">${P_Password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/secure/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${P_Server}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:45.0) Gecko/20100101 Firefox/45.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Launch-URL" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${__P(TC_Launch,100)}</stringProp>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="account/signin?signUpReturnUrl=https%3A%2F%2Fwww.companynamestage.com%2Fcs%2Foffers%2Fsubscribe%3Fsub%3D1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="signUpReturnUrl" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">signUpReturnUrl</stringProp>
                    <stringProp name="Argument.value">https://${P_Server}/cs/offers/subscribe?sub=1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">account/signin</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1068664737">Sign up today</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/account/signin/frame?" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">account/signin/frame</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-542111160">Sign in</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Acccount Signin" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${__P(TC_AccountSignin,100)}</stringProp>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/account/signin/frame/authenticate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;password&quot;:&quot;${P_Password}&quot;,&quot;username&quot;:&quot;${P_Username}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">account/signin/frame/authenticate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${P_Server}</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-836030906">userId</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">mypasswordreset</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.passwordReset</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOTFOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get UserID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">userId</stringProp>
                <stringProp name="RegexExtractor.regex">userId&quot;:&quot;(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOTFOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
                <intProp name="OnError.action">4</intProp>
              </ResultAction>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If -PasswordReset" enabled="true">
            <stringProp name="IfController.condition">&quot;${mypasswordreset}&quot;==&quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="secure/account/credentials/" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">secure/account/credentials/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${P_Server}</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1979598185">Account credentials</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If -PasswordResetFalse" enabled="true">
            <stringProp name="IfController.condition">&quot;${LOAD_HOME_PAGE}&quot;==&quot;true&quot; &amp;&amp; &quot;${mypasswordreset}&quot;==&quot;false&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="HomePage" enabled="true">
              <intProp name="ThroughputController.style">1</intProp>
              <boolProp name="ThroughputController.perThread">false</boolProp>
              <intProp name="ThroughputController.maxThroughput">1</intProp>
              <stringProp name="ThroughputController.percentThroughput">${__P(TC_HomePage,100)}</stringProp>
            </ThroughputController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                      <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="2126059291">companyname.com</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/Banners/API/Get/63?callback=jQuery111108894649281341518_1556110557840&amp;webpart-request-type=ajax&amp;_=1556110557841" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="webpart-request-type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">webpart-request-type</stringProp>
                      <stringProp name="Argument.value">ajax</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="callback" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">callback</stringProp>
                      <stringProp name="Argument.value">jQuery111108894649281341518_${__time(,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="_" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">_</stringProp>
                      <stringProp name="Argument.value">${__time(,)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">Banners/API/Get/63</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, */*; q=0.01</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="webpart-request-type" elementType="Header">
                      <stringProp name="Header.name">webpart-request-type</stringProp>
                      <stringProp name="Header.value">ajax</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/cs/spots2/tealium-lihp-banner.wp" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">cs/spots2/tealium-lihp-banner.wp</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/cs/spots2/LIHPOverlayCMS.wp" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">cs/spots2/LIHPOverlayCMS.wp</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- for sending other requests." enabled="true">
          <stringProp name="IfController.condition">&quot;${FlagTosendOtherRequests}&quot;==&quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${P_Server}/messaging" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">messaging</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Host" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">www.companynamestage.com</stringProp>
                </elementProp>
                <elementProp name="Connection" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,de;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="514169069">https://www.companynamecdn.com/express-fe</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Static requests" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/ui/2.0.0/css/core.css" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ui/2.0.0/css/core.css</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/shared-footer/1.0.177/footer.css" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">shared-footer/1.0.177/footer.css</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/shared-navigation/2.1/header-82c2d27f.min.css" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">shared-navigation/2.1/header-82c2d27f.min.css</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/express-fe/bundle.1b6737b974ecfd8e4a1f.css" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">express-fe/bundle.1b6737b974ecfd8e4a1f.css</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/ui-static/i/logo/companyname-on-dark.svg" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ui-static/i/logo/companyname-on-dark.svg</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/ui/2.0.0/js/core.js" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ui/2.0.0/js/core.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/shared-navigation/2.1/header-7af2e342.min.js" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">shared-navigation/2.1/header-7af2e342.min.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/express-fe/bundle.prod.6a8d03a4564e4eb6f8ee.js" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">express-fe/bundle.prod.6a8d03a4564e4eb6f8ee.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/express-fe/vendor.func.180a640e6eb9aed1c17c.js" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">express-fe/vendor.func.180a640e6eb9aed1c17c.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/ui-static/font/source-sans-pro-bold.woff2" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ui-static/font/source-sans-pro-bold.woff2</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.companynamecdn.com/ui/2.0.0/css/core.css</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${P_Server}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/ui/2.0.0/font/companyname-icon.woff2" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ui/2.0.0/font/companyname-icon.woff2</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.companynamecdn.com/ui/2.0.0/css/core.css</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${P_Server}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.companynamecdn.com/ui-static/font/source-sans-pro.woff2" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.companynamecdn.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">ui-static/font/source-sans-pro.woff2</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.companynamecdn.com/ui/2.0.0/css/core.css</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://${P_Server}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://js-agent.newrelic.com/nr-1118.min.js" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">js-agent.newrelic.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">nr-1118.min.js</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${P_Server}/app-api/express/v1/authentication/getaccesstoken" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;client&quot;:&quot;TO&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">app-api/express/v1/authentication/getaccesstoken</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${P_Server}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Host" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${P_Server}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,de;q=0.7</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="credentials" elementType="Header">
                  <stringProp name="Header.name">credentials</stringProp>
                  <stringProp name="Header.value">include</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                </elementProp>
                <elementProp name="Connection" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="Content-Length" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">15</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="GetAuthToken" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">c_authToken</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;token&quot;:&quot;(.*?)&quot;}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOTFOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="110541305">token</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${P_bamnrserver}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tt</stringProp>
                  <stringProp name="Argument.value">ff004ca4861858</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="a" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">a</stringProp>
                  <stringProp name="Argument.value">226782050</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="be" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">be</stringProp>
                  <stringProp name="Argument.value">1321</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="jsonp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">jsonp</stringProp>
                  <stringProp name="Argument.value">NREUM.setToken</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ap" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ap</stringProp>
                  <stringProp name="Argument.value">26.008679</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rst" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rst</stringProp>
                  <stringProp name="Argument.value">4269</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ref" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ref</stringProp>
                  <stringProp name="Argument.value">https://${P_Server}/messaging</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1118.0c07c19</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="to" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">to</stringProp>
                  <stringProp name="Argument.value">NVJQMRAEWhBRUUNbCgwYdx0SF1EQQ1hEHSInYx1K</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="perf" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">perf</stringProp>
                  <stringProp name="Argument.value">%7B%22timing%22:%7B%22of%22:1548678161798,%22n%22:0,%22f%22:2,%22dn%22:4,%22dne%22:209,%22c%22:209,%22s%22:469,%22ce%22:738,%22rq%22:738,%22rp%22:1134,%22rpe%22:1138,%22dl%22:1146,%22di%22:3154,%22ds%22:3154,%22de%22:3155,%22dc%22:3467,%22l%22:3467,%22le%22:3473%7D,%22navigation%22:%7B%7D%7D</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fe</stringProp>
                  <stringProp name="Argument.value">3469</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="dc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">dc</stringProp>
                  <stringProp name="Argument.value">3155</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_bamnrserver}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">1/ae44cb1d6a</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="746709932">NREUM.setToken</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://${P_Server}/app-api/express/v1/profiles/bulk" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[&quot;${userId}&quot;]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">app-api/express/v1/profiles/bulk</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${P_Server}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Host" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${P_Server}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,de;q=0.7</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${P_Server}/messaging</stringProp>
                </elementProp>
                <elementProp name="Connection" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="Content-Length" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">40</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">SecureATT=eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IjEifQ.eyJzdWIiOiIwMDAwMDJlMy0wMDAxLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAiLCJleHAiOjE1NDQwODM1OTh9.YW0Mnr5AKPWsmCf3gNXWKoCn7gmUU2-6TqpA-w0jWYfmtZDFClIs5QWb1I-WnorrcOtLqJSUrdwBrKtIDOvihA;</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="123">{</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/express/v1/profiles?userId=&lt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">app-api/express/v1/profiles?userId=${userId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1752163738">UserId</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/express/v1/profiles/details?userId=&lt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">app-api/express/v1/profiles/details?userId=${userId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1752163738">UserId</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/express/v1/getblockedusers?userId=&lt;&gt;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">app-api/express/v1/getblockedusers?userId=${userId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="91">[</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.OpenWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.OpenWebSocketSampler" testname="WebSocket Open Connection" enabled="true">
            <boolProp name="TLS">true</boolProp>
            <stringProp name="server">${P_twilioServer}</stringProp>
            <stringProp name="port">443</stringProp>
            <stringProp name="path">/v3/wsconnect</stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
          </eu.luminis.jmeter.wssampler.OpenWebSocketSampler>
          <hashTree/>
          <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="1st frame: init  Frame" enabled="true">
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="TLS">true</boolProp>
            <stringProp name="server">tsock.us1.twilio</stringProp>
            <stringProp name="port">443</stringProp>
            <stringProp name="path">/v3/wsconnect</stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${FirstMessage}</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating first frame message" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">	  String id=&quot;TM&quot;+&quot;${__UUID}&quot;;  
	  String str = &quot;TWILSOCK V3.0 889..{\&quot;id\&quot;:\&quot;&quot;+id+&quot;\&quot;,\&quot;method\&quot;:\&quot;init\&quot;,\&quot;token\&quot;:\&quot;${c_authToken}\&quot;,\&quot;continuation_token\&quot;:${c_continuationToken},\&quot;metadata\&quot;:{\&quot;ver\&quot;:\&quot;0.5.6\&quot;,\&quot;env\&quot;:\&quot;Chrome\&quot;,\&quot;envv\&quot;:\&quot;71.0.3578.98\&quot;,\&quot;os\&quot;:\&quot;Windows\&quot;,\&quot;osv\&quot;:\&quot;10\&quot;,\&quot;osa\&quot;:64,\&quot;sdk\&quot;:\&quot;js-default\&quot;},\&quot;registrations\&quot;:null,\&quot;capabilities\&quot;:[\&quot;client_update\&quot;,\&quot;offline_storage\&quot;],\&quot;payload_size\&quot;:0}..&quot;;  
	 // //log.info(&quot;length:&quot;+str.length());
	  //log.info(&quot;**************1st frame requestFirst message text input : &quot; + str);
	  char[] chars = str.toCharArray();	  
	  StringBuffer hexconverted = new StringBuffer();
	  for(int i = 0; i &lt; chars.length; i++){
	  	
		  hexconverted.append(&quot;0x&quot;+Integer.toHexString((int)chars[i])+&quot; &quot;);
	  }
	  
	 ////log.info(&quot;First message Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;FirstMessage&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">byte[] firstFrameResponse = prev.getResponseData();
String s = new String(firstFrameResponse);

log.info(&quot;************Response of first frame : &quot;+s);
if(s.contains(&quot;\&quot;code\&quot;:200,\&quot;status\&quot;:\&quot;OK\&quot;&quot;)){
AssertionResult.setFailure(false);

}
else{
AssertionResult.setFailure(true);
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="2nd frame:Put notification Message Frame" enabled="true">
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="TLS">true</boolProp>
            <stringProp name="server">tsock.us1.twilio</stringProp>
            <stringProp name="port">443</stringProp>
            <stringProp name="path">/v3/wsconnect</stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${NotificationMessage}</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">SecureATT=${c_authToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">
//Actual Notification messgae	  //TWILSOCK V3.0 159..{&quot;method&quot;:&quot;put_notification_ctx&quot;,&quot;notification_ctx_id&quot;:&quot;8ef3efd2-e3f6-4764-87a0-be6778fa8f30&quot;,&quot;id&quot;:&quot;TMd09f2a33-9ef1-42a7-bfad-e13a4684d40a&quot;,&quot;payload_size&quot;:319}..{&quot;product_id&quot;:&quot;ip_messaging&quot;,&quot;notification_protocol_version&quot;:4,&quot;endpoint_platform&quot;:&quot;Mozilla/5.0 (Windows NT10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&quot;,&quot;message_types&quot;:[&quot;twilio.sync.event&quot;,&quot;com.twilio.rtd.cds.document&quot;,&quot;com.twilio.rtd.cds.list&quot;,&quot;com.twilio.rtd.cds.map&quot;]}
	 	  String id=&quot;TM&quot;+&quot;${__UUID}&quot;;  
	  String str = &quot;TWILSOCK V3.0 159..{\&quot;method\&quot;:\&quot;put_notification_ctx\&quot;,\&quot;notification_ctx_id\&quot;:\&quot;${__UUID}\&quot;,\&quot;id\&quot;:\&quot;&quot;+id+&quot;\&quot;,\&quot;payload_size\&quot;:319}..{\&quot;product_id\&quot;:\&quot;ip_messaging\&quot;,\&quot;notification_protocol_version\&quot;:4,\&quot;endpoint_platform\&quot;:\&quot;Mozilla/5.0 (Windows NT10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\&quot;,\&quot;message_types\&quot;:[\&quot;twilio.sync.event\&quot;,\&quot;com.twilio.rtd.cds.document\&quot;,\&quot;com.twilio.rtd.cds.list\&quot;,\&quot;com.twilio.rtd.cds.map\&quot;]}&quot;;  
	  ////log.info(&quot;length:&quot;+str.length());
	  //log.info(&quot;************2nd frame NotificationMessage message text input : &quot; + str);
	  char[] chars = str.toCharArray();	  
	  StringBuffer hexconverted = new StringBuffer();
	  for(int i = 0; i &lt; chars.length; i++){
	  	
		  hexconverted.append(&quot;0x&quot;+Integer.toHexString((int)chars[i])+&quot; &quot;);
	  }
	  
	// //log.info(&quot;NotificationMessage message Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;NotificationMessage&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">byte[] firstFrameResponse = prev.getResponseData();
String s = new String(firstFrameResponse);

//log.info(&quot;************Response 2nd frame: &quot;+s);
if(s.contains(&quot;\&quot;code\&quot;:200,\&quot;status\&quot;:\&quot;notification-ctx-created\&quot;&quot;)){
AssertionResult.setFailure(false);

}
else{
AssertionResult.setFailure(true);
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="3rd Frame:/v3/Lists" enabled="true">
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="TLS">true</boolProp>
            <stringProp name="server">tsock.us1.twilio</stringProp>
            <stringProp name="port">443</stringProp>
            <stringProp name="path">/v3/wsconnect</stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${3rdFrameLists}</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">SecureATT=${c_authToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">
//Actual 3rd messgae	  TWILSOCK V3.0 479..{&quot;id&quot;:&quot;TM7b833c0b-705e-4ab9-95b9-c8c3268e830a&quot;,&quot;method&quot;:&quot;message&quot;,&quot;active_grant&quot;:&quot;ip_messaging&quot;,&quot;payload_type&quot;:&quot;application/json&quot;,&quot;http_request&quot;:{&quot;host&quot;:&quot;cds.us1.twilio.com&quot;,&quot;path&quot;:&quot;/v3/Lists&quot;,&quot;method&quot;:&quot;POST&quot;,&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;application/json&quot;,&quot;Twilio-Sync-Client-Info&quot;:&quot;{\&quot;sdk\&quot;:\&quot;js\&quot;,\&quot;sdkVer\&quot;:\&quot;0.8.5\&quot;,\&quot;os\&quot;:\&quot;Windows\&quot;,\&quot;osVer\&quot;:\&quot;10\&quot;,\&quot;pl\&quot;:\&quot;Chrome\&quot;,\&quot;plVer\&quot;:\&quot;71.0.3578.98\&quot;}&quot;,&quot;Twilio-Request-Id&quot;:&quot;RQef8a95219ce64a208efb060b52e64d4a&quot;}},&quot;payload_size&quot;:153}..{&quot;purpose&quot;:&quot;com.twilio.rtd.ipmsg&quot;,&quot;context&quot;:{&quot;type&quot;:&quot;IpMsgSession&quot;,&quot;apiVersion&quot;:&quot;3&quot;,&quot;endpointPlatform&quot;:&quot;js|3.1.0|Windows 1064-bit|Chrome|71.0.3578.98&quot;}}
	 	  	  String id=&quot;TM&quot;+&quot;${__UUID}&quot;;
	  String str1 = &quot;TWILSOCK V3.0 479..{\&quot;id\&quot;:\&quot;&quot;+id+&quot;\&quot;,\&quot;method\&quot;:\&quot;message\&quot;,\&quot;active_grant\&quot;:\&quot;ip_messaging\&quot;,\&quot;payload_type\&quot;:\&quot;application/json\&quot;,\&quot;http_request\&quot;:{\&quot;host\&quot;:\&quot;cds.us1.twilio.com\&quot;,\&quot;path\&quot;:\&quot;/v3/Lists\&quot;,\&quot;method\&quot;:\&quot;POST\&quot;,\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;application/json\&quot;,\&quot;Twilio-Sync-Client-Info\&quot;:\&quot;&quot;;
	  String str2=&quot;{\&quot;sdk\&quot;:\&quot;js\&quot;,\&quot;sdkVer\&quot;:\&quot;0.8.5\&quot;,\&quot;os\&quot;:\&quot;Windows\&quot;,\&quot;osVer\&quot;:\&quot;10\&quot;,\&quot;pl\&quot;:\&quot;Chrome\&quot;,\&quot;plVer\&quot;:\&quot;71.0.3578.98\&quot;}&quot;;
String str3=	  &quot;\&quot;,\&quot;Twilio-Request-Id\&quot;:\&quot;RQ${__RandomString(32,123456789qwertyuiopasdfghjklzxcvbnm,)}\&quot;}},\&quot;payload_size\&quot;:153}..{\&quot;purpose\&quot;:\&quot;com.twilio.rtd.ipmsg\&quot;,\&quot;context\&quot;:{\&quot;type\&quot;:\&quot;IpMsgSession\&quot;,\&quot;apiVersion\&quot;:\&quot;3\&quot;,\&quot;endpointPlatform\&quot;:\&quot;js|3.1.0|Windows 1064-bit|Chrome|71.0.3578.98\&quot;}}&quot;;
//String str2changed=str2.replace(&quot;\&quot;&quot;,&quot;\\\&quot;&quot;);
	  String str= str1+str2+str3;
	  //log.info(&quot;***************3rdFrameLists input : &quot; + str);
	  char[] chars1 = str1.toCharArray();
	  char[] chars2 = str2.toCharArray();
	  char[] chars3 = str3.toCharArray();			  
	  StringBuffer hexconverted1 = new StringBuffer();
	  for(int i = 0; i &lt; chars1.length; i++){
	  	
		  hexconverted1.append(&quot;0x&quot;+Integer.toHexString((int)chars1[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted2 = new StringBuffer();
	  for(int i = 0; i &lt; chars2.length; i++){
	  	
		  hexconverted2.append(&quot;0x&quot;+Integer.toHexString((int)chars2[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted3 = new StringBuffer();
	  for(int i = 0; i &lt; chars3.length; i++){
	  	
		  hexconverted3.append(&quot;0x&quot;+Integer.toHexString((int)chars3[i])+&quot; &quot;);
	  }
	  String hexas1=hexconverted1.toString();
	  String hexas2=hexconverted2.toString().replace(&quot;0x22&quot;,&quot;0x5c 0x22&quot;);
	  String hexas3=hexconverted3.toString();
	  String hexconverted = hexas1+hexas2+hexas3;
	////log.info(&quot;Text Message:&quot;+hexconverted);
	// //log.info(&quot;3rdFrameLists input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;3rdFrameLists&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 //vars.put(&quot;3rdFrameListsTXT&quot;,str);

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="ProcessBinaryResponse" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">byte[] firstFrameResponse = prev.getResponseData();
String s = new String(firstFrameResponse);

//log.info(&quot;Response : &quot;+s);
if(s.contains(&quot;200&quot;)){
AssertionResult.setFailure(false);
}
else{
AssertionResult.setFailure(true);
}
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">
byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);

if(text.contains(&quot;\&quot;code\&quot;:200,\&quot;status\&quot;:\&quot;OK\&quot;&quot;)){
AssertionResult.setFailure(false);

}
else{
	//log.info(&quot;*******3rd frame Response : &quot;+text);
AssertionResult.setFailure(true);
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.regex.Pattern;
import java.util.regex.Matcher;

byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
//String text    =s;                ;
//&quot;https://cds.us1.twilio.com/v3/Services/IS88dff50e283c41b5b8b7d11b3479667f/Lists/SH7903960a83c941f2bea3050451dabd9a\&quot;
String ServiceSIDString1 = &quot;.com/v3/Services/(.+?)/Lists&quot;;
String SID=&quot;\&quot;sid\&quot;:\&quot;(.+?)\&quot;&quot;;

        Pattern pattern = Pattern.compile(ServiceSIDString1);
        Matcher matcher = pattern.matcher(text);
        
        Pattern pattern2 = Pattern.compile(SID);
        Matcher matcher2 = pattern2.matcher(text);

        while(matcher.find()) {
            //log.info(&quot;ServiceSIDString1: &quot; + matcher.group(1));
             vars.put(&quot;ServiceSIDString1&quot;,matcher.group(1));                 
        }
        while(matcher2.find()) {
            //log.info(&quot;SID: &quot; + matcher2.group(1));
            vars.put(&quot;SID&quot;,matcher2.group(1));
                   
        }
      
        
   
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="4th Frame: Get Context" enabled="true">
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="TLS">true</boolProp>
            <stringProp name="server">tsock.us1.twilio</stringProp>
            <stringProp name="port">443</stringProp>
            <stringProp name="path">/v3/wsconnect</stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${GetContextFrame}</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">SecureATT=${c_authToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">	//Actual Msg TWILSOCK V3.0 563..{&quot;id&quot;:&quot;TMa94122ed-6e08-46d0-8b61-0776801df1bf&quot;,&quot;method&quot;:&quot;message&quot;,&quot;active_grant&quot;:&quot;ip_messaging&quot;,&quot;payload_type&quot;:&quot;application/json&quot;,&quot;http_request&quot;:{&quot;host&quot;:&quot;cds.us1.twilio.com&quot;,&quot;path&quot;:&quot;/v3/Services/IS88dff50e283c41b5b8b7d11b3479667f/Lists/SH9958c7d69210445fb06f98ade18bd814/Context&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;application/json&quot;,&quot;Twilio-Sync-Client-Info&quot;:&quot;{\&quot;sdk\&quot;:\&quot;js\&quot;,\&quot;sdkVer\&quot;:\&quot;0.8.5\&quot;,\&quot;os\&quot;:\&quot;Windows\&quot;,\&quot;osVer\&quot;:\&quot;10\&quot;,\&quot;pl\&quot;:\&quot;Chrome\&quot;,\&quot;plVer\&quot;:\&quot;71.0.3578.98\&quot;}&quot;,&quot;Twilio-Request-Id&quot;:&quot;RQ58fb06acc6e048a19e0f4f62eaea946b&quot;}},&quot;payload_size&quot;:0}..
	  String id=&quot;TM&quot;+&quot;${__UUID}&quot;;
	  String str1 = &quot;TWILSOCK V3.0 563..{\&quot;id\&quot;:\&quot;&quot;+id+&quot;\&quot;,\&quot;method\&quot;:\&quot;message\&quot;,\&quot;active_grant\&quot;:\&quot;ip_messaging\&quot;,\&quot;payload_type\&quot;:\&quot;application/json\&quot;,\&quot;http_request\&quot;:{\&quot;host\&quot;:\&quot;cds.us1.twilio.com\&quot;,\&quot;path\&quot;:\&quot;/v3/Services/${ServiceSIDString1}/Lists/${SID}/Context\&quot;,\&quot;method\&quot;:\&quot;GET\&quot;,\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;application/json\&quot;,\&quot;Twilio-Sync-Client-Info\&quot;:\&quot;&quot;;
	  String str2=&quot;{\&quot;sdk\&quot;:\&quot;js\&quot;,\&quot;sdkVer\&quot;:\&quot;0.8.5\&quot;,\&quot;os\&quot;:\&quot;Windows\&quot;,\&quot;osVer\&quot;:\&quot;10\&quot;,\&quot;pl\&quot;:\&quot;Chrome\&quot;,\&quot;plVer\&quot;:\&quot;71.0.3578.98\&quot;}&quot;;
String str3=	  &quot;\&quot;,\&quot;Twilio-Request-Id\&quot;:\&quot;RQ${__RandomString(32,123456789qwertyuiopasdfghjklzxcvbnm,)}\&quot;}},\&quot;payload_size\&quot;:0}..&quot;;
//String str2changed=str2.replace(&quot;\&quot;&quot;,&quot;\\\&quot;&quot;);
	  String str= str1+str2+str3;
	  //log.info(&quot;***************4th request GetContextFrame message text input : &quot; + str);
	  char[] chars1 = str1.toCharArray();
	  char[] chars2 = str2.toCharArray();
	  char[] chars3 = str3.toCharArray();			  
	  StringBuffer hexconverted1 = new StringBuffer();
	  for(int i = 0; i &lt; chars1.length; i++){
	  	
		  hexconverted1.append(&quot;0x&quot;+Integer.toHexString((int)chars1[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted2 = new StringBuffer();
	  for(int i = 0; i &lt; chars2.length; i++){
	  	
		  hexconverted2.append(&quot;0x&quot;+Integer.toHexString((int)chars2[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted3 = new StringBuffer();
	  for(int i = 0; i &lt; chars3.length; i++){
	  	
		  hexconverted3.append(&quot;0x&quot;+Integer.toHexString((int)chars3[i])+&quot; &quot;);
	  }
	  String hexas1=hexconverted1.toString();
	  String hexas2=hexconverted2.toString().replace(&quot;0x22&quot;,&quot;0x5c 0x22&quot;);
	  String hexas3=hexconverted3.toString();
	  String hexconverted = hexas1+hexas2+hexas3;
	////log.info(&quot;Text Message:&quot;+hexconverted);
	// //log.info(&quot;GetContextFrame Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;GetContextFrame&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 vars.put(&quot;GetContextFrameTXT&quot;,str);

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="ProcessBinaryResponse" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">byte[] firstFrameResponse = prev.getResponseData();
String s = new String(firstFrameResponse);

//log.info(&quot;Response : &quot;+s);
if(s.contains(&quot;200&quot;)){
AssertionResult.setFailure(false);
}
else{
AssertionResult.setFailure(true);
}
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">
byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
//log.info(&quot;***************4th Get context Response : &quot;+text);
if(text.contains(&quot;\&quot;code\&quot;:200,\&quot;status\&quot;:\&quot;OK\&quot;&quot;)){
AssertionResult.setFailure(false);

}
else{
AssertionResult.setFailure(true);
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.regex.Pattern;
import java.util.regex.Matcher;

byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
//String text    =s;                ;
//&quot;https://cds.us1.twilio.com/v3/Services/IS88dff50e283c41b5b8b7d11b3479667f/Lists/SH7903960a83c941f2bea3050451dabd9a\&quot;
String ServiceSIDString1 = &quot;.com/v3/Services/(.+?)/Lists&quot;;
String SID=&quot;\&quot;sid\&quot;:\&quot;(.+?)\&quot;&quot;;

        Pattern pattern = Pattern.compile(ServiceSIDString1);
        Matcher matcher = pattern.matcher(text);
        
        Pattern pattern2 = Pattern.compile(SID);
        Matcher matcher2 = pattern2.matcher(text);

        while(matcher.find()) {
            //log.info(&quot;ServiceSIDString1: &quot; + matcher.group(1));
             vars.put(&quot;ServiceSIDString1&quot;,matcher.group(1));                 
        }
        while(matcher2.find()) {
            //log.info(&quot;SID: &quot; + matcher2.group(1));
            vars.put(&quot;SID&quot;,matcher2.group(1));
                   
        }
      
        
   
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="5th Frame: Get Subscriptions" enabled="true">
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="TLS">true</boolProp>
            <stringProp name="server">tsock.us1.twilio</stringProp>
            <stringProp name="port">443</stringProp>
            <stringProp name="path">/v3/wsconnect</stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${GetSubscriptionFrame}</stringProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">SecureATT=${c_authToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">	//Actual Msg TWILSOCK V3.0 487..{&quot;id&quot;:&quot;TM9d9c757d-dee2-4c45-8e94-63ffd01782de&quot;,&quot;method&quot;:&quot;message&quot;,&quot;active_grant&quot;:&quot;ip_messaging&quot;,&quot;payload_type&quot;:&quot;application/json&quot;,&quot;http_request&quot;:{&quot;host&quot;:&quot;cds.us1.twilio.com&quot;,&quot;path&quot;:&quot;/v4/Subscriptions&quot;,&quot;method&quot;:&quot;POST&quot;,&quot;headers&quot;:{&quot;Content-Type&quot;:&quot;application/json&quot;,&quot;Twilio-Sync-Client-Info&quot;:&quot;{\&quot;sdk\&quot;:\&quot;js\&quot;,\&quot;sdkVer\&quot;:\&quot;0.8.5\&quot;,\&quot;os\&quot;:\&quot;Windows\&quot;,\&quot;osVer\&quot;:\&quot;10\&quot;,\&quot;pl\&quot;:\&quot;Chrome\&quot;,\&quot;plVer\&quot;:\&quot;71.0.3578.98\&quot;}&quot;,&quot;Twilio-Request-Id&quot;:&quot;RQ7c8f3b0caa3f4bad953afb036ba39f1d&quot;}},&quot;payload_size&quot;:220}..{&quot;event_protocol_version&quot;:3,&quot;action&quot;:&quot;establish&quot;,&quot;correlation_id&quot;:1549889607407,&quot;retried_requests&quot;:0,&quot;ttl_in_s&quot;:-1,&quot;requests&quot;:[{&quot;object_sid&quot;:&quot;SH9958c7d69210445fb06f98ade18bd814&quot;,&quot;object_type&quot;:&quot;list&quot;,&quot;last_event_id&quot;:-1}]}
	  String id=&quot;TM&quot;+&quot;${__UUID}&quot;;
	  String str1 = &quot;TWILSOCK V3.0 487..{\&quot;id\&quot;:\&quot;&quot;+id+&quot;\&quot;,\&quot;method\&quot;:\&quot;message\&quot;,\&quot;active_grant\&quot;:\&quot;ip_messaging\&quot;,\&quot;payload_type\&quot;:\&quot;application/json\&quot;,\&quot;http_request\&quot;:{\&quot;host\&quot;:\&quot;cds.us1.twilio.com\&quot;,\&quot;path\&quot;:\&quot;/v4/Subscriptions\&quot;,\&quot;method\&quot;:\&quot;POST\&quot;,\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;application/json\&quot;,\&quot;Twilio-Sync-Client-Info\&quot;:\&quot;&quot;;
	  String str2=&quot;{\&quot;sdk\&quot;:\&quot;js\&quot;,\&quot;sdkVer\&quot;:\&quot;0.8.5\&quot;,\&quot;os\&quot;:\&quot;Windows\&quot;,\&quot;osVer\&quot;:\&quot;10\&quot;,\&quot;pl\&quot;:\&quot;Chrome\&quot;,\&quot;plVer\&quot;:\&quot;71.0.3578.98\&quot;}&quot;;
String str3=	  &quot;\&quot;,\&quot;Twilio-Request-Id\&quot;:\&quot;RQ${__RandomString(32,123456789qwertyuiopasdfghjklzxcvbnm,)}\&quot;}},\&quot;payload_size\&quot;:220}..{\&quot;event_protocol_version\&quot;:3,\&quot;action\&quot;:\&quot;establish\&quot;,\&quot;correlation_id\&quot;:1549889607407,\&quot;retried_requests\&quot;:0,\&quot;ttl_in_s\&quot;:-1,\&quot;requests\&quot;:[{\&quot;object_sid\&quot;:\&quot;${SID}\&quot;,\&quot;object_type\&quot;:\&quot;list\&quot;,\&quot;last_event_id\&quot;:-1}]}&quot;;
//String str2changed=str2.replace(&quot;\&quot;&quot;,&quot;\\\&quot;&quot;);
	  String str= str1+str2+str3;
	  ////log.info(&quot;GetSubscriptionFrame message text input : &quot; + str);
	  //log.info(&quot;***********5th request :GetSubscriptionFrame message text input &quot; + str);
	  char[] chars1 = str1.toCharArray();
	  char[] chars2 = str2.toCharArray();
	  char[] chars3 = str3.toCharArray();			  
	  StringBuffer hexconverted1 = new StringBuffer();
	  for(int i = 0; i &lt; chars1.length; i++){
	  	
		  hexconverted1.append(&quot;0x&quot;+Integer.toHexString((int)chars1[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted2 = new StringBuffer();
	  for(int i = 0; i &lt; chars2.length; i++){
	  	
		  hexconverted2.append(&quot;0x&quot;+Integer.toHexString((int)chars2[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted3 = new StringBuffer();
	  for(int i = 0; i &lt; chars3.length; i++){
	  	
		  hexconverted3.append(&quot;0x&quot;+Integer.toHexString((int)chars3[i])+&quot; &quot;);
	  }
	  String hexas1=hexconverted1.toString();
	  String hexas2=hexconverted2.toString().replace(&quot;0x22&quot;,&quot;0x5c 0x22&quot;);
	  String hexas3=hexconverted3.toString();
	  String hexconverted = hexas1+hexas2+hexas3;
	////log.info(&quot;Text Message:&quot;+hexconverted);
	// //log.info(&quot;GetSubscriptionFrame Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;GetSubscriptionFrame&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 vars.put(&quot;GetSubscriptionFrameTXT&quot;,str);

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="ProcessBinaryResponse" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">byte[] firstFrameResponse = prev.getResponseData();
String s = new String(firstFrameResponse);

//log.info(&quot;Response : &quot;+s);
if(s.contains(&quot;200&quot;)){
AssertionResult.setFailure(false);
}
else{
AssertionResult.setFailure(true);
}
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">
byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
//log.info(&quot;***********5th request response:GetSubscriptionFrame message text response &quot; + text);
if(text.contains(&quot;\&quot;code\&quot;:200,\&quot;status\&quot;:\&quot;OK\&quot;&quot;)){
AssertionResult.setFailure(false);

}
else{
AssertionResult.setFailure(true);
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.regex.Pattern;
import java.util.regex.Matcher;

byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
//String text    =s;                ;
//&quot;https://cds.us1.twilio.com/v3/Services/IS88dff50e283c41b5b8b7d11b3479667f/Lists/SH7903960a83c941f2bea3050451dabd9a\&quot;
String ServiceSIDString1 = &quot;.com/v3/Services/(.+?)/Lists&quot;;
String SID=&quot;\&quot;sid\&quot;:\&quot;(.+?)\&quot;&quot;;

        Pattern pattern = Pattern.compile(ServiceSIDString1);
        Matcher matcher = pattern.matcher(text);
        
        Pattern pattern2 = Pattern.compile(SID);
        Matcher matcher2 = pattern2.matcher(text);

        while(matcher.find()) {
            //log.info(&quot;ServiceSIDString1: &quot; + matcher.group(1));
             vars.put(&quot;ServiceSIDString1&quot;,matcher.group(1));                 
        }
        while(matcher2.find()) {
            //log.info(&quot;SID: &quot; + matcher2.group(1));
            vars.put(&quot;SID&quot;,matcher2.group(1));
                   
        }
      
        
   
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="6th Frame- single read sampler to get the twi io.sync.event from server" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <boolProp name="createNewConnection">false</boolProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="optional">false</boolProp>
            <stringProp name="dataType">Binary</stringProp>
          </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.regex.Pattern;
import java.util.regex.Matcher;

byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
//log.info(&quot;***********6th response :Reply captured as twilio event text &quot; + text);
////log.info(&quot;Reply captured as twilio event text &quot; + text);
//String text    =s;                ;
//&quot;userInfosToSubscribe&quot;:100,&quot;userInfo&quot;:&quot;USdd2539331ab149b6bff0068f8fafa3a7.info&quot;
//TWILSOCK V3.0 181{&quot;method&quot;:&quot;notification&quot;,&quot;id&quot;:&quot;TM8c5b8411fc224fc7a95e1d5bce11c42f&quot;,&quot;payload_size&quot;:1181,&quot;payload_type&quot;:&quot;application/json&quot;,&quot;message_type&quot;:&quot;twilio.sync.event&quot;,&quot;notification_ctx_id&quot;:&quot;&quot;}{&quot;event_type&quot;:&quot;list_context_updated&quot;,&quot;correlation_id&quot;:1549889607407,&quot;event_protocol_version&quot;:3,&quot;event&quot;:{&quot;context_data&quot;:{&quot;myChannels&quot;:&quot;00bb4420-d004-0000-0000-000000000000.channels&quot;,&quot;consumptionReportInterval&quot;:&quot;PT1S&quot;,&quot;userInfosToSubscribe&quot;:100,&quot;userInfo&quot;:&quot;USdd2539331ab149b6bff0068f8fafa3a7.info&quot;,&quot;reachabilityEnabled&quot;:true,&quot;apiVersion&quot;:&quot;3&quot;,&quot;channels&quot;:&quot;channels&quot;,&quot;httpCacheInterval&quot;:&quot;PT1S&quot;,&quot;identity&quot;:&quot;00bb4420-d004-0000-0000-000000000000&quot;,&quot;links&quot;:{&quot;syncListUrl&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Users/USdd2539331ab149b6bff0068f8fafa3a7/SyncList&quot;,&quot;myChannelsUrl&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Users/USdd2539331ab149b6bff0068f8fafa3a7/Channels&quot;,&quot;publicChannelsUrl&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Channels&quot;,&quot;usersUrl&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Users&quot;,&quot;typingUrl&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Typing&quot;,&quot;mediaServiceUrl&quot;:&quot;/v1/Services/IS88dff50e283c41b5b8b7d11b3479667f/Media&quot;},&quot;type&quot;:&quot;IpMsgSession&quot;,&quot;endpointPlatform&quot;:&quot;js|3.1.0|Windows 1064-bit|Chrome|71.0.3578.98&quot;},&quot;date_created&quot;:&quot;2019-02-13T13:29:00.236Z&quot;,&quot;list_sid&quot;:&quot;SHc87d67daea6c4ab39bc69526d3084553&quot;,&quot;id&quot;:0,&quot;list_revision&quot;:&quot;1&quot;}}
String myChannels = &quot;\&quot;identity\&quot;:\&quot;(.+?)\&quot;,&quot;;
String userInfo = &quot;Users/(.+?)/&quot;;
String TMid=&quot;\&quot;id\&quot;:\&quot;(.+?)\&quot;,\&quot;payload&quot;;

        Pattern pattern = Pattern.compile(myChannels);
        Matcher matcher = pattern.matcher(text);
        
        Pattern pattern2 = Pattern.compile(TMid);
        Matcher matcher2 = pattern2.matcher(text);
       
        Pattern pattern3 = Pattern.compile(userInfo);
        Matcher matcher3 = pattern3.matcher(text);
 	
 		while(matcher.find()) {
            //log.info(&quot;myChannels: &quot; + matcher.group(1));
            vars.put(&quot;myChannels&quot;,matcher.group(1));
                   
        }
        
        while(matcher2.find()) {
            //log.info(&quot;TMid: &quot; + matcher2.group(1));
            vars.put(&quot;TMid&quot;,matcher2.group(1));
                   
        }

        while(matcher3.find()) {
            //log.info(&quot;userInfo: &quot; + matcher3.group(1));
            vars.put(&quot;userInfo&quot;,matcher3.group(1));
                   
        }</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="6th Frame- single write sampler to reply to twi io.sync.event" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${replyTwilioevent}</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">	  //String id=&quot;TM&quot;+&quot;${__UUID}&quot;;  
	  String str = &quot;TWILSOCK V3.0 147..{\&quot;id\&quot;:\&quot;${TMid}\&quot;,\&quot;method\&quot;:\&quot;reply\&quot;,\&quot;payload_type\&quot;:\&quot;application/json\&quot;,\&quot;status\&quot;:{\&quot;code\&quot;:200,\&quot;status\&quot;:\&quot;OK\&quot;},\&quot;payload_size\&quot;:0}..&quot;;  
	 //log.info(&quot;***********6th request:Reply to twilio event text input &quot; + str);
	  ////log.info(&quot;Reply to twilio event text input : &quot; + str);
	  char[] chars = str.toCharArray();	  
	  StringBuffer hexconverted = new StringBuffer();
	  for(int i = 0; i &lt; chars.length; i++){
	  	
		  hexconverted.append(&quot;0x&quot;+Integer.toHexString((int)chars[i])+&quot; &quot;);
	  }
	  
	 ////log.info(&quot;First message Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;replyTwilioevent&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 vars.put(&quot;replyTwilioeventTXT&quot;,str);

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="7th Frame- single read sampler to get the twi io.sync.event from server" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <boolProp name="createNewConnection">false</boolProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="optional">false</boolProp>
            <stringProp name="dataType">Binary</stringProp>
          </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.regex.Pattern;
import java.util.regex.Matcher;

byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
//log.info(&quot;***********7th response :Reply captured to get the twi io.sync.event from server&quot; + text);
//String text    =s;                ;
//
//String userID = &quot;userInfo\&quot;:\&quot;(.+?).info&quot;;
String TMid2=&quot;\&quot;id\&quot;:\&quot;(.+?)\&quot;,\&quot;payload&quot;;

        //Pattern pattern = Pattern.compile(myChannels);
        //Matcher matcher = pattern.matcher(text);
        
        Pattern pattern2 = Pattern.compile(TMid2);
        Matcher matcher2 = pattern2.matcher(text);

        
        while(matcher2.find()) {
			//log.info(&quot;TMid2: &quot; + matcher2.group(1));
                vars.put(&quot;TMid2&quot;,matcher2.group(1));
                   
        }
               
   
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="7th Frame- single write sampler to reply to twi io.sync.event" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${replyTwilioevent2}</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">	  //String id=&quot;TM&quot;+&quot;${__UUID}&quot;;  
	  String str = &quot;TWILSOCK V3.0 147..{\&quot;id\&quot;:\&quot;${TMid2}\&quot;,\&quot;method\&quot;:\&quot;reply\&quot;,\&quot;payload_type\&quot;:\&quot;application/json\&quot;,\&quot;status\&quot;:{\&quot;code\&quot;:200,\&quot;status\&quot;:\&quot;OK\&quot;},\&quot;payload_size\&quot;:0}..&quot;;  
	 //log.info(&quot;***********7th request:Reply to twilio event text input &quot; + str);
	  ////log.info(&quot;Reply to twilio event text input : &quot; + str);
	  char[] chars = str.toCharArray();	  
	  StringBuffer hexconverted = new StringBuffer();
	  for(int i = 0; i &lt; chars.length; i++){
	  	
		  hexconverted.append(&quot;0x&quot;+Integer.toHexString((int)chars[i])+&quot; &quot;);
	  }
	  
	 ////log.info(&quot;First message Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;replyTwilioevent2&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 vars.put(&quot;replyTwilioevent2TXT&quot;,str);

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="8th Frame- single write sampler to pu t_notification_c tx" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${putNotificationctx}</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">	//Actual Msg TWILSOCK V3.0 324..{&quot;id&quot;:&quot;TM14f7f144-c34f-491b-a362-3a181a7cfccd&quot;,&quot;method&quot;:&quot;message&quot;,&quot;active_grant&quot;:&quot;ip_messaging&quot;,&quot;payload_type&quot;:&quot;application/json&quot;,&quot;http_request&quot;:{&quot;host&quot;:&quot;aim.twilio.com&quot;,&quot;path&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Users/USdd2539331ab149b6bff0068f8fafa3a7/Channels&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;headers&quot;:{}},&quot;payload_size&quot;:0}..
	   String id=&quot;TM&quot;+&quot;${__UUID}&quot;;  
	  String str = &quot;TWILSOCK V3.0 159..{\&quot;method\&quot;:\&quot;put_notification_ctx\&quot;,\&quot;notification_ctx_id\&quot;:\&quot;${__UUID}\&quot;,\&quot;id\&quot;:\&quot;&quot;+id+&quot;\&quot;,\&quot;payload_size\&quot;:351}..{\&quot;product_id\&quot;:\&quot;ip_messaging\&quot;,\&quot;notification_protocol_version\&quot;:4,\&quot;endpoint_platform\&quot;:\&quot;Mozilla/5.0 (Windows NT10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\&quot;,\&quot;message_types\&quot;:[\&quot;twilio.sync.event\&quot;,\&quot;com.twilio.rtd.cds.document\&quot;,\&quot;com.twilio.rtd.cds.list\&quot;,\&quot;com.twilio.rtd.cds.map\&quot;,\&quot;twilio.ipmsg.typing_indicator\&quot;]}&quot;;  
	 // //log.info(&quot;length:&quot;+str.length());
	 //log.info(&quot;***********8th Request :put_notification_ctx text input&quot; + str);
	//  //log.info(&quot;8th frame- put_notification_ctx message text input : &quot; + str);
	  char[] chars = str.toCharArray();	  
	  StringBuffer hexconverted = new StringBuffer();
	  for(int i = 0; i &lt; chars.length; i++){
	  	
		  hexconverted.append(&quot;0x&quot;+Integer.toHexString((int)chars[i])+&quot; &quot;);
	  }
	////log.info(&quot;Text Message:&quot;+hexconverted);
	// //log.info(&quot;GetChanelFrame Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;putNotificationctx&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 vars.put(&quot;putNotificationctxTXT&quot;,str);

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="9th Frame- single write sampler to get maps" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${getMapsFrame}</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">	  String id=&quot;TM&quot;+&quot;${__UUID}&quot;;
	  String str1 = &quot;TWILSOCK V3.0 544..{\&quot;id\&quot;:\&quot;&quot;+id+&quot;\&quot;,\&quot;method\&quot;:\&quot;message\&quot;,\&quot;active_grant\&quot;:\&quot;ip_messaging\&quot;,\&quot;payload_type\&quot;:\&quot;application/json\&quot;,\&quot;http_request\&quot;:{\&quot;host\&quot;:\&quot;cds.us1.twilio.com\&quot;,\&quot;path\&quot;:\&quot;/v3/Maps/${userInfo}.info\&quot;,\&quot;method\&quot;:\&quot;GET\&quot;,\&quot;params\&quot;:{\&quot;Include\&quot;:\&quot;items\&quot;},\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;application/json\&quot;,\&quot;Twilio-Sync-Client-Info\&quot;:\&quot;&quot;;
	  String str2=&quot;{\&quot;sdk\&quot;:\&quot;js\&quot;,\&quot;sdkVer\&quot;:\&quot;0.8.5\&quot;,\&quot;os\&quot;:\&quot;Windows\&quot;,\&quot;osVer\&quot;:\&quot;10\&quot;,\&quot;pl\&quot;:\&quot;Chrome\&quot;,\&quot;plVer\&quot;:\&quot;71.0.3578.98\&quot;}&quot;;
String str3=	  &quot;\&quot;,\&quot;Twilio-Request-Id\&quot;:\&quot;RQ${__RandomString(32,123456789qwertyuiopasdfghjklzxcvbnm,)}\&quot;}},\&quot;payload_size\&quot;:0}..&quot;;
//String str2changed=str2.replace(&quot;\&quot;&quot;,&quot;\\\&quot;&quot;);
	  String str= str1+str2+str3;
	  //log.info(&quot;***********9th Request :getMapsFrame text input&quot; + str);
	  ////log.info(&quot;getMapsFrame message text input : &quot; + str);
	  char[] chars1 = str1.toCharArray();
	  char[] chars2 = str2.toCharArray();
	  char[] chars3 = str3.toCharArray();			  
	  StringBuffer hexconverted1 = new StringBuffer();
	  for(int i = 0; i &lt; chars1.length; i++){
	  	
		  hexconverted1.append(&quot;0x&quot;+Integer.toHexString((int)chars1[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted2 = new StringBuffer();
	  for(int i = 0; i &lt; chars2.length; i++){
	  	
		  hexconverted2.append(&quot;0x&quot;+Integer.toHexString((int)chars2[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted3 = new StringBuffer();
	  for(int i = 0; i &lt; chars3.length; i++){
	  	
		  hexconverted3.append(&quot;0x&quot;+Integer.toHexString((int)chars3[i])+&quot; &quot;);
	  }
	  String hexas1=hexconverted1.toString();
	  String hexas2=hexconverted2.toString().replace(&quot;0x22&quot;,&quot;0x5c 0x22&quot;);
	  String hexas3=hexconverted3.toString();
	  String hexconverted = hexas1+hexas2+hexas3;
	////log.info(&quot;Text Message:&quot;+hexconverted);
	// //log.info(&quot;GetSubscriptionFrame Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;getMapsFrame&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 vars.put(&quot;getMapsFrameTXT&quot;,str);

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="10th Frame- single write sampler toget Maps 2" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${getMaps2Frame}</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">	  //String id=&quot;TM&quot;+&quot;${__UUID}&quot;;
	  //TWILSOCK V3.0 521..{\&quot;id\&quot;:\&quot;TM44addc44-a9f2-43d4-b6d4-8455fb6eb410\&quot;,\&quot;method\&quot;:\&quot;message\&quot;,\&quot;active_grant\&quot;:\&quot;ip_messaging\&quot;,\&quot;payload_type\&quot;:\&quot;application/json\&quot;,\&quot;http_request\&quot;:{\&quot;host\&quot;:\&quot;cds.us1.twilio.com\&quot;,\&quot;path\&quot;:\&quot;/v3/Maps/00bb4420-d004-0000-0000-000000000000.channels\&quot;,\&quot;method\&quot;:\&quot;GET\&quot;,\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;application/json\&quot;,\&quot;Twilio-Sync-Client-Info\&quot;:\&quot;{\\\&quot;sdk\\\&quot;:\\\&quot;js\\\&quot;,\\\&quot;sdkVer\\\&quot;:\\\&quot;0.8.5\\\&quot;,\\\&quot;os\\\&quot;:\\\&quot;Windows\\\&quot;,\\\&quot;osVer\\\&quot;:\\\&quot;10\\\&quot;,\\\&quot;pl\\\&quot;:\\\&quot;Chrome\\\&quot;,\\\&quot;plVer\\\&quot;:\\\&quot;71.0.3578.98\\\&quot;}\&quot;,\&quot;Twilio-Request-Id\&quot;:\&quot;RQ7e15196d92a2450eabc39f0848b83713\&quot;}},\&quot;payload_size\&quot;:0}..  
	  String id=&quot;TM&quot;+&quot;${__UUID}&quot;;
	  String str1 = &quot;TWILSOCK V3.0 521..{\&quot;id\&quot;:\&quot;&quot;+id+&quot;\&quot;,\&quot;method\&quot;:\&quot;message\&quot;,\&quot;active_grant\&quot;:\&quot;ip_messaging\&quot;,\&quot;payload_type\&quot;:\&quot;application/json\&quot;,\&quot;http_request\&quot;:{\&quot;host\&quot;:\&quot;cds.us1.twilio.com\&quot;,\&quot;path\&quot;:\&quot;/v3/Maps/${myChannels}.channels\&quot;,\&quot;method\&quot;:\&quot;GET\&quot;,\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;application/json\&quot;,\&quot;Twilio-Sync-Client-Info\&quot;:\&quot;&quot;;
	  String str2=&quot;{\&quot;sdk\&quot;:\&quot;js\&quot;,\&quot;sdkVer\&quot;:\&quot;0.8.5\&quot;,\&quot;os\&quot;:\&quot;Windows\&quot;,\&quot;osVer\&quot;:\&quot;10\&quot;,\&quot;pl\&quot;:\&quot;Chrome\&quot;,\&quot;plVer\&quot;:\&quot;71.0.3578.98\&quot;}&quot;;
String str3=	  &quot;\&quot;,\&quot;Twilio-Request-Id\&quot;:\&quot;RQ${__RandomString(32,123456789qwertyuiopasdfghjklzxcvbnm,)}\&quot;}},\&quot;payload_size\&quot;:0}...&quot;;
//String str2changed=str2.replace(&quot;\&quot;&quot;,&quot;\\\&quot;&quot;);
	  String str= str1+str2+str3;
	  	  //log.info(&quot;***********10th Request :getMaps2Frame text input&quot; + str);
	 // //log.info(&quot;getMaps2Frame message text input : &quot; + str);
	  char[] chars1 = str1.toCharArray();
	  char[] chars2 = str2.toCharArray();
	  char[] chars3 = str3.toCharArray();			  
	  StringBuffer hexconverted1 = new StringBuffer();
	  for(int i = 0; i &lt; chars1.length; i++){
	  	
		  hexconverted1.append(&quot;0x&quot;+Integer.toHexString((int)chars1[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted2 = new StringBuffer();
	  for(int i = 0; i &lt; chars2.length; i++){
	  	
		  hexconverted2.append(&quot;0x&quot;+Integer.toHexString((int)chars2[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted3 = new StringBuffer();
	  for(int i = 0; i &lt; chars3.length; i++){
	  	
		  hexconverted3.append(&quot;0x&quot;+Integer.toHexString((int)chars3[i])+&quot; &quot;);
	  }
	  String hexas1=hexconverted1.toString();
	  String hexas2=hexconverted2.toString().replace(&quot;0x22&quot;,&quot;0x5c 0x22&quot;);
	  String hexas3=hexconverted3.toString();
	  String hexconverted = hexas1+hexas2+hexas3;
	////log.info(&quot;Text Message:&quot;+hexconverted);
	// //log.info(&quot;GetSubscriptionFrame Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;getMaps2Frame&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 vars.put(&quot;getMaps2FrameTXT&quot;,str);

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="11th Frame: Get Channel" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <stringProp name="requestData">${GetChanelFrame}</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="loadDataFromFile">false</boolProp>
            <stringProp name="dataFile"></stringProp>
          </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">	//Actual Msg TWILSOCK V3.0 324..{&quot;id&quot;:&quot;TM14f7f144-c34f-491b-a362-3a181a7cfccd&quot;,&quot;method&quot;:&quot;message&quot;,&quot;active_grant&quot;:&quot;ip_messaging&quot;,&quot;payload_type&quot;:&quot;application/json&quot;,&quot;http_request&quot;:{&quot;host&quot;:&quot;aim.twilio.com&quot;,&quot;path&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Users/USdd2539331ab149b6bff0068f8fafa3a7/Channels&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;headers&quot;:{}},&quot;payload_size&quot;:0}..
	   String id=&quot;TM&quot;+&quot;${__UUID}&quot;;  
	  String str = &quot;TWILSOCK V3.0 324..{\&quot;id\&quot;:\&quot;&quot;+id+&quot;\&quot;,\&quot;method\&quot;:\&quot;message\&quot;,\&quot;active_grant\&quot;:\&quot;ip_messaging\&quot;,\&quot;payload_type\&quot;:\&quot;application/json\&quot;,\&quot;http_request\&quot;:{\&quot;host\&quot;:\&quot;aim.twilio.com\&quot;,\&quot;path\&quot;:\&quot;/v1/Instances/${ServiceSIDString1}/Users/${userInfo}/Channels\&quot;,\&quot;method\&quot;:\&quot;GET\&quot;,\&quot;headers\&quot;:{}},\&quot;payload_size\&quot;:0}..&quot;;  
	 // //log.info(&quot;length:&quot;+str.length());
	  //log.info(&quot;***********11th Request :GetChanelFrame text input&quot; + str);
	  ////log.info(&quot;GetChanelFrame message text input : &quot; + str);
	  char[] chars = str.toCharArray();	  
	  StringBuffer hexconverted = new StringBuffer();
	  for(int i = 0; i &lt; chars.length; i++){
	  	
		  hexconverted.append(&quot;0x&quot;+Integer.toHexString((int)chars[i])+&quot; &quot;);
	  }
	////log.info(&quot;Text Message:&quot;+hexconverted);
	// //log.info(&quot;GetChanelFrame Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;GetChanelFrame&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 vars.put(&quot;GetChanelFrameTXT&quot;,str);

	 </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="12th Frame- single read sampler to get the chanel info" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <boolProp name="createNewConnection">false</boolProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="optional">false</boolProp>
            <stringProp name="dataType">Binary</stringProp>
          </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.regex.Pattern;
import java.util.regex.Matcher;

byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
  //log.info(&quot;***********12th Frame response :GetChanelFrame text &quot; + text);
  vars.put(&quot;allReadData&quot;,text);
  /*
////log.info(&quot;Response captured for the get channel info request &quot; + text);
//String text    =s;                ;
//181..{&quot;method&quot;:&quot;notification&quot;,&quot;id&quot;:&quot;TM593623442dd1483b8e146cb9340bf415&quot;,&quot;payload_size&quot;:1182,&quot;payload_type&quot;:&quot;application/json&quot;,&quot;message_type&quot;:&quot;twilio.sync.event&quot;,&quot;notification_ctx_id&quot;:&quot;&quot;}..{&quot;event_type&quot;:&quot;list_context_updated&quot;,&quot;correlation_id&quot;:1549889607407,&quot;event_protocol_version&quot;:3,&quot;event&quot;:{&quot;context_data&quot;:{&quot;myChannels&quot;:&quot;00bb4420-d004-0000-0000-000000000000.channels&quot;,&quot;consumptionReportInterval&quot;:&quot;PT1S&quot;,&quot;userInfosToSubscribe&quot;:100,&quot;userInfo&quot;:&quot;USdd2539331ab149b6bff0068f8fafa3a7.info&quot;,&quot;reachabilityEnabled&quot;:true,&quot;apiVersion&quot;:&quot;3&quot;,&quot;channels&quot;:&quot;channels&quot;,&quot;httpCacheInterval&quot;:&quot;PT1S&quot;,&quot;identity&quot;:&quot;00bb4420-d004-0000-0000-000000000000&quot;,&quot;links&quot;:{&quot;syncListUrl&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Users/USdd2539331ab149b6bff0068f8fafa3a7/SyncList&quot;,&quot;myChannelsUrl&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Users/USdd2539331ab149b6bff0068f8fafa3a7/Channels&quot;,&quot;publicChannelsUrl&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Channels&quot;,&quot;usersUrl&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Users&quot;,&quot;typingUrl&quot;:&quot;/v1/Instances/IS88dff50e283c41b5b8b7d11b3479667f/Typing&quot;,&quot;mediaServiceUrl&quot;:&quot;/v1/Services/IS88dff50e283c41b5b8b7d11b3479667f/Media&quot;},&quot;type&quot;:&quot;IpMsgSession&quot;,&quot;endpointPlatform&quot;:&quot;js|3.1.0|Windows 10 64-bit|Chrome|71.0.3578.98&quot;},&quot;date_created&quot;:&quot;2019-02-11T12:53:26.980Z&quot;,&quot;list_sid&quot;:&quot;SH9958c7d69210445fb06f98ade18bd814&quot;,&quot;id&quot;:0,&quot;list_revision&quot;:&quot;1&quot;}}..
String Channelsid = &quot;{\&quot;channel_sid\&quot;:\&quot;(.+?)\&quot;&quot;;
String userInfo=&quot;userInfo\&quot;:\&quot;(.+?).info\&quot;,&quot;;

        Pattern pattern = Pattern.compile(Channelsid);
        Matcher matcher = pattern.matcher(text);
        
        Pattern pattern2 = Pattern.compile(userInfo);
        Matcher matcher2 = pattern2.matcher(text);

        while(matcher.find()) {
        //log.info(&quot;Channelsid: &quot; + matcher.group(1));
             vars.put(&quot;Channelsid&quot;,matcher.group(1));                 
        }
            
        while(matcher2.find()) {
            //log.info(&quot;userInfo: &quot; + matcher2.group(1));
            vars.put(&quot;userInfo&quot;,matcher2.group(1));
                   
        }
        
      
*/        
   
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="11th Frame- single read sampler to get the Maps 2 response" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <boolProp name="createNewConnection">false</boolProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="optional">false</boolProp>
            <stringProp name="dataType">Binary</stringProp>
          </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.regex.Pattern;
import java.util.regex.Matcher;

byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
//log.info(&quot;***********11th Frame response :eply captured as Mape 2 text &quot; + text);
String combined=text+vars.get(&quot;allReadData&quot;);
vars.put(&quot;allReadData&quot;,combined);
/*
String Channelsid = &quot;{\&quot;channel_sid\&quot;:\&quot;(.+?)\&quot;&quot;;
String userInfo=&quot;userInfo\&quot;:\&quot;(.+?).info\&quot;,&quot;;

        Pattern pattern = Pattern.compile(Channelsid);
        Matcher matcher = pattern.matcher(text);
        
        Pattern pattern2 = Pattern.compile(userInfo);
        Matcher matcher2 = pattern2.matcher(text);

        while(matcher.find()) {
        //log.info(&quot;Channelsid: &quot; + matcher.group(1));
             vars.put(&quot;Channelsid&quot;,matcher.group(1));                 
        }
            
        while(matcher2.find()) {
            //log.info(&quot;userInfo: &quot; + matcher2.group(1));
            vars.put(&quot;userInfo&quot;,matcher2.group(1));
                   
        }
        
     */ 
        
   
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="9th Frame- single read sampler to get the put notification response." enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <boolProp name="createNewConnection">false</boolProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="optional">false</boolProp>
            <stringProp name="dataType">Binary</stringProp>
          </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.regex.Pattern;
import java.util.regex.Matcher;

byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
//log.info(&quot;***********9th Frame response :Reply captured 2 as put notification response&quot; + text);
String combined=text+vars.get(&quot;allReadData&quot;);
vars.put(&quot;allReadData&quot;,combined);
/*
String Channelsid = &quot;{\&quot;channel_sid\&quot;:\&quot;(.+?)\&quot;&quot;;
String userInfo=&quot;userInfo\&quot;:\&quot;(.+?).info\&quot;,&quot;;

        Pattern pattern = Pattern.compile(Channelsid);
        Matcher matcher = pattern.matcher(text);
        
        Pattern pattern2 = Pattern.compile(userInfo);
        Matcher matcher2 = pattern2.matcher(text);

        while(matcher.find()) {
        //log.info(&quot;Channelsid: &quot; + matcher.group(1));
             vars.put(&quot;Channelsid&quot;,matcher.group(1));                 
        }
            
        while(matcher2.find()) {
            //log.info(&quot;userInfo: &quot; + matcher2.group(1));
            vars.put(&quot;userInfo&quot;,matcher2.group(1));
                   
        }
      */  
      
        
   
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="10th Frame- single read sampler to get the get Maps response" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <stringProp name="connectTimeout">20000</stringProp>
            <boolProp name="binaryPayload">true</boolProp>
            <boolProp name="createNewConnection">false</boolProp>
            <stringProp name="readTimeout">6000</stringProp>
            <boolProp name="optional">false</boolProp>
            <stringProp name="dataType">Binary</stringProp>
          </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.regex.Pattern;
import java.util.regex.Matcher;

byte[] FrameResponse = prev.getResponseData();
String text = new String(FrameResponse);
//log.info(&quot;***********10th Frame response :Reply captured for get maps&quot; + text);
////log.info(&quot;10th msg Reply captured for get maps response text &quot; + text);
String combined=text+vars.get(&quot;allReadData&quot;);
vars.put(&quot;allReadData&quot;,combined);
/*
String Channelsid = &quot;{\&quot;channel_sid\&quot;:\&quot;(.+?)\&quot;&quot;;
String userInfo=&quot;userInfo\&quot;:\&quot;(.+?).info\&quot;,&quot;;

        Pattern pattern = Pattern.compile(Channelsid);
        Matcher matcher = pattern.matcher(text);
        
        Pattern pattern2 = Pattern.compile(userInfo);
        Matcher matcher2 = pattern2.matcher(text);

        while(matcher.find()) {
        //log.info(&quot;Channelsid: &quot; + matcher.group(1));
             vars.put(&quot;Channelsid&quot;,matcher.group(1));                 
        }
            
        while(matcher2.find()) {
            //log.info(&quot;userInfo: &quot; + matcher2.group(1));
            vars.put(&quot;userInfo&quot;,matcher2.group(1));
                   
        }
        */
        
      
        
   
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Getting channel Id from combined response" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.*;
ArrayList channelsTotal=new ArrayList(); 
String text=vars.get(&quot;allReadData&quot;);
String Channelsid = &quot;\&quot;channel_sid\&quot;:\&quot;(.+?)\&quot;,\&quot;status\&quot;&quot;;
        Pattern pattern2 = Pattern.compile(Channelsid);
        Matcher matcher2 = pattern2.matcher(text);        
        while(matcher2.find()) {
	               channelsTotal.add(matcher2.group(1));
        }
     if(channelsTotal.size()==0){
     	//log.info(vars.get(&quot;P_Username&quot;)+&quot;Does not have any channel added&quot;);
        	vars.put(&quot;CreateChannelFlag&quot;,&quot;true&quot;);
        }else{
        int random = (int )(Math.random() * channelsTotal.size());
	   //log.info(&quot;channelsTotal.size()&quot;+channelsTotal.size()+&quot; random&quot;+random);
	   vars.put(&quot;Channelsid&quot;,channelsTotal.get(random));
        //log.info(&quot;Channelsid: &quot; +channelsTotal.get(random)); 	
        vars.put(&quot;CreateChannelFlag&quot;,&quot;false&quot;);
        }
       </stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller- to create channel" enabled="true">
            <stringProp name="IfController.condition">&quot;${CreateChannelFlag}&quot;==&quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/express/v1/createchannel" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
			&quot;Users&quot;:[&#xd;
				&quot;${userId}&quot;,&#xd;
				&quot;${P_OtherUserID}&quot;&#xd;
]&#xd;
		}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${P_Server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">app-api/express/v1/createchannel</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Making FlagTosendOtherRequests as false." enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;FlagTosendOtherRequests&quot;,&quot;false&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler" testname="Actual Send Message Frame" enabled="true">
          <boolProp name="createNewConnection">false</boolProp>
          <boolProp name="TLS">true</boolProp>
          <stringProp name="server">tsock.us1.twilio</stringProp>
          <stringProp name="port">443</stringProp>
          <stringProp name="path">/v3/wsconnect</stringProp>
          <stringProp name="connectTimeout">20000</stringProp>
          <boolProp name="binaryPayload">true</boolProp>
          <stringProp name="requestData">${Message}</stringProp>
          <stringProp name="readTimeout">6000</stringProp>
          <boolProp name="loadDataFromFile">false</boolProp>
          <stringProp name="dataFile"></stringProp>
        </eu.luminis.jmeter.wssampler.RequestResponseWebSocketSampler>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">SecureATT=${c_authToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Creating message frame" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">	  String id=&quot;TM&quot;+&quot;${__UUID}&quot;;
	  String sendTime=&quot;${__time()}&quot;;
	 //String chanelID=vars.get(&quot;Channelsid&quot;);
	
	 //&quot;CH6e2a9a3aeef44ff498b7e96d447fe9da&quot;);
	
	  vars.put(&quot;SendTime&quot;,sendTime);
	  String str1 = &quot;TWILSOCK V3.0 564..{\&quot;id\&quot;:\&quot;&quot;+id+&quot;\&quot;,\&quot;method\&quot;:\&quot;message\&quot;,\&quot;active_grant\&quot;:\&quot;ip_messaging\&quot;,\&quot;payload_type\&quot;:\&quot;application/json\&quot;,\&quot;http_request\&quot;:{\&quot;host\&quot;:\&quot;cds.us1.twilio.com\&quot;,\&quot;path\&quot;:\&quot;/v3/Services/${ServiceSIDString1}/Lists/${SID}/Items\&quot;,\&quot;method\&quot;:\&quot;POST\&quot;,\&quot;headers\&quot;:{\&quot;Content-Type\&quot;:\&quot;application/json\&quot;,\&quot;Twilio-Sync-Client-Info\&quot;:\&quot;&quot;;
	  String str2=&quot;{\&quot;sdk\&quot;:\&quot;js\&quot;,\&quot;sdkVer\&quot;:\&quot;0.8.5\&quot;,\&quot;os\&quot;:\&quot;Windows\&quot;,\&quot;osVer\&quot;:\&quot;10\&quot;,\&quot;pl\&quot;:\&quot;Chrome\&quot;,\&quot;plVer\&quot;:\&quot;71.0.3578.98\&quot;}&quot;;
String str3=	  &quot;\&quot;,\&quot;Twilio-Request-Id\&quot;:\&quot;RQ${__RandomString(32,123456789qwertyuiopasdfghjklzxcvbnm,)}\&quot;}},\&quot;payload_size\&quot;:183}..{\&quot;data\&quot;:{\&quot;request\&quot;:{\&quot;channelSid\&quot;:\&quot;${Channelsid}\&quot;,\&quot;text\&quot;:\&quot;the msg${Counter}\&quot;,\&quot;attributes\&quot;:\&quot;{}\&quot;,\&quot;action\&quot;:\&quot;sendMessage\&quot;},\&quot;commandId\&quot;:\&quot;${__UUID}\&quot;}}&quot;;
//String str2changed=str2.replace(&quot;\&quot;&quot;,&quot;\\\&quot;&quot;);
	  String str= str1+str2+str3;
	  log.info(&quot;Message text input : &quot; + str);
	  char[] chars1 = str1.toCharArray();
	  char[] chars2 = str2.toCharArray();
	  char[] chars3 = str3.toCharArray();			  
	  StringBuffer hexconverted1 = new StringBuffer();
	  for(int i = 0; i &lt; chars1.length; i++){
	  	
		  hexconverted1.append(&quot;0x&quot;+Integer.toHexString((int)chars1[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted2 = new StringBuffer();
	  for(int i = 0; i &lt; chars2.length; i++){
	  	
		  hexconverted2.append(&quot;0x&quot;+Integer.toHexString((int)chars2[i])+&quot; &quot;);
	  }
	   StringBuffer hexconverted3 = new StringBuffer();
	  for(int i = 0; i &lt; chars3.length; i++){
	  	
		  hexconverted3.append(&quot;0x&quot;+Integer.toHexString((int)chars3[i])+&quot; &quot;);
	  }
	  String hexas1=hexconverted1.toString();
	  String hexas2=hexconverted2.toString().replace(&quot;0x22&quot;,&quot;0x5c 0x22&quot;);
	  String hexas3=hexconverted3.toString();
	  String hexconverted = hexas1+hexas2+hexas3;
	////log.info(&quot;Text Message:&quot;+hexconverted);
	// //log.info(&quot;message Hex input :&quot;+hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 ////log.info(&quot;First message Hex without tostring :&quot;+hexconverted);
	 vars.put(&quot;Message&quot;,hexconverted.toString().replace(&quot;0x2e 0x2e&quot;,&quot;0x0d 0x0a&quot;));
	 vars.put(&quot;MessageTXT&quot;,str);

	 </stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">byte[] firstFrameResponse = prev.getResponseData();
String s = new String(firstFrameResponse);
//log.info(&quot;Response actual frame: &quot;+s);
if(s.contains(&quot;\&quot;method\&quot;:\&quot;notification\&quot;&quot;)||s.contains(&quot;200&quot;)){
AssertionResult.setFailure(false);
vars.put(&quot;FlagTosendOtherRequests&quot;,&quot;false&quot;);

}
else{
AssertionResult.setFailure(true);
vars.put(&quot;FlagTosendOtherRequests&quot;,&quot;true&quot;);
}

String sendtime= vars.get(&quot;SendTime&quot;).trim();
String currentTime= &quot;${__time()}&quot;;
//log.info(&quot;sendtime&quot;+sendtime+&quot;currentTime&quot;+currentTime+&quot;.&quot;);
long MsgProcessTime=  Long.parseLong(currentTime)- Long.parseLong(sendtime);
//log.info(&quot;Total time taken to recieve the message:  &quot;+MsgProcessTime+&quot;ms&quot;);</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">byte[] firstFrameResponse = prev.getResponseData();
String s = new String(firstFrameResponse);
log.info(&quot;Response actual frame: &quot;+s);</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
